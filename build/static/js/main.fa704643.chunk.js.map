{"version":3,"sources":["modules/Map.js","modules/Information.js","modules/Header.js","modules/PopUp.js","App.js","reportWebVitals.js","index.js"],"names":["serviceKey","apiKey","station_key","objectToText","object","Object","keys","map","key","_text","MapEvent","props","useState","zoomLevel","setZoomLevel","useMap","mapEvents","useMapEvents","zoomend","getZoom","moveend","console","log","center","gpsLati","gpsLong","url","axios","get","then","response","data","request","JSON","parse","header","resultCode","items","body","item","setStation","Array","isArray","forEach","catch","error","getBusStationInfo","getCenter","dragend","BASE_ZOOM_LEVEL","className","Map","position","mapIcon","leaflet","icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","vworld_url","vworld_key","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","station","length","gpslati","gpslong","nodenm","Marker","Popup","nodeid","Tooltip","direction","opacity","permanent","Information","citycode","onClick","openModal","src","App","BusArravalInfo","array","routeno","arrprevstationcnt","arrtime","time","parseInt","PopUp","isOpen","close","arravalInfo","index","isModalOpen","setIsModalOpen","setNodenm","setArravalInfo","getBusArravalInfo","responseText","newArr","routeid","newInfo","push","Header","_nodenm","_nodeid","_citycode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa704643.chunk.js","sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents, Tooltip } from 'react-leaflet';\nimport { useState } from \"react\";\nimport 'leaflet/dist/leaflet.css'\nimport axios from 'axios';\nimport leaflet from 'leaflet';\nimport apiKey from '../private/apiKey.json'\n\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\nfunction objectToText(object) {\n    Object.keys(object).map(function (key) {\n        object[key] = object[key]._text;\n    });\n    return object;\n}\nfunction getBusStationInfo(props, center) {\n    var gpsLati = center[\"lat\"];\n    var gpsLong = center[\"lng\"];\n    var parameter = \"?serviceKey=\" + serviceKey + \"&gpsLati=\" + gpsLati + \"&gpsLong=\" + gpsLong;\n    var url = '/api/BusSttnInfoInqireService/getCrdntPrxmtSttnList' + parameter;\n    console.log(url);\n    axios.get(url)\n        .then(function (response) {\n            console.log(response)\n            var data = response.request.response;\n            data = JSON.parse(data).response;\n            if (data.header.resultCode._text == \"00\") {\n                // api 조회 정상적으로 완료 했을 때 \n                var items = data.body.items.item;\n                if (items == null) {\n                    props.setStation([]);\n                } else if (Array.isArray(items)) {\n                    items.forEach(item => {\n                        console.log(item)\n                        item = objectToText(item);\n                    });\n                    props.setStation(items);\n                } else {\n                    items = objectToText(items);\n                    props.setStation([items]);\n                }\n                console.log(items);\n            } else {\n                console.log(data.header.resultCode)\n            }\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n\n}\nfunction MapEvent(props) {\n    const [zoomLevel, setZoomLevel] = useState(16); // initial zoom level provided for MapContainer\n    const map = useMap();\n    var state = true; // 초기화 시 한번만 실행하기 위한 state 변수\n    const BASE_ZOOM_LEVEL = 13\n\n    const mapEvents = useMapEvents({\n        // 지도 zoom 종료\n        zoomend: () => {\n            setZoomLevel(mapEvents.getZoom()); // 현재 지도의 center lat, lng 가져오기\n        },\n        // 지도 움직임 종료\n        moveend: () => {\n            console.log(zoomLevel)\n            if (zoomLevel > BASE_ZOOM_LEVEL) {\n                getBusStationInfo(props, map.getCenter());\n            }\n        },\n        // 스크롤로 이동할 때 false\n        dragend: () => {\n        }\n    });\n    if (zoomLevel < BASE_ZOOM_LEVEL + 1) {\n        return (\n            <div className=\"alert-box\"><h4>조금 더 가까이 이동해주세요</h4></div>\n        )\n    } else {\n        return (\n            <div></div>\n        );\n    }\n}\n\nfunction Map(props) {\n    const [position, setPosition] = useState([37.50937295468167, 127.0461450277878]);\n\n    let mapIcon = leaflet.icon({\n        iconUrl: process.env.PUBLIC_URL + '/marker.png',\n        iconRetinaUrl: process.env.PUBLIC_URL + '/marker.png',\n        iconAnchor: [15, 15],\n        popupAnchor: [0, 0],\n        iconSize: [30, 30],\n    });\n    let vworld_url = \"https://api.vworld.kr/req/wmts/1.0.0/\" + apiKey.vworld_key + \"/Base/{z}/{y}/{x}.png\"\n    return (\n        <div className=\"map-container\">\n            <MapContainer center={position} zoom={16} scrollWheelZoom={true}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url={vworld_url}\n                />\n                <MapEvent zoomLevel={props.zoomLevel} setStation={props.setStation} />\n                {props.station.length > 0 &&\n                    props.station.map(({ gpslati, gpslong, nodenm }) => {\n                        return (\n                            <Marker position={[gpslati + \"\", gpslong + \"\"]} icon={mapIcon}>\n                                <Popup>\n                                    <span>{props.nodeid}</span>\n                                </Popup>\n                                <Tooltip direction='bottom' opacity={1} permanent>\n                                    <span>{nodenm}</span>\n                                </Tooltip>\n                            </Marker>\n                        )\n                    })}\n            </MapContainer>\n        </div >\n    )\n}\n\n\nexport default Map;","\nimport React from 'react';\n\nfunction Information(props) {\n    return (\n        <div className=\"infomation-container\">\n            <div className=\"infomation-table\">\n                {props.station.length > 0 &&\n                    props.station.map(({ nodenm, nodeid, citycode }) => {\n                        return (\n                            <div onClick={() => props.openModal(nodenm, nodeid, citycode)}>\n                                <div className='info'>\n                                    <img src={process.env.PUBLIC_URL + '/marker.png'} />\n                                    <h5>{nodenm}({nodeid})</h5>\n                                </div>\n                                <hr />\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div >\n    )\n}\n\nexport default Information;","import '../App.css';\nfunction App() {\n    return (\n        <header className=\"App-header\">\n            <div className=\"logo\">Bus Information</div>\n        </header>\n    );\n}\n\nexport default App;","\nimport React, { Component, useState } from 'react';\n\nfunction BusArravalInfo(props) {\n    return (\n        props.array.map(({ routeno, arrprevstationcnt, arrtime }) => {\n            const time = parseInt(parseInt(arrtime) / 60);\n            return (\n                <div>\n                    <span>{time < 2 ? (\"잠시후 도착\") : (`${time}분 후`)}</span>\n                    <span>{arrprevstationcnt} 정거장 전</span>\n                </div>\n\n            )\n        }\n        )\n    )\n}\nfunction PopUp(props) {\n    const { isOpen, close } = props;\n    return (\n        <>{\n            isOpen ? (\n                <div className=\"modal-container \">\n                    <div className=\"modal\">\n                        <button onClick={close}>X</button>\n                        <div className=\"info-content\">\n                            <h3 className=\"station-name\">{props.nodenm}</h3>\n                            <div className=\"arrival-info-container\">\n                                {Object.keys(props.arravalInfo).length > 0 &&\n                                    Object.keys(props.arravalInfo).map((key, index) => {\n                                        return (\n                                            <div className=\"arrival-bus-info\">\n                                                <span className=\"route-number\">{props.arravalInfo[key][0]['routeno']}번</span>\n                                                <span className=\"arrival-bus-container\">\n                                                    <BusArravalInfo array={props.arravalInfo[key]} ></BusArravalInfo>\n                                                </span>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ) : null\n        }\n        </>\n    )\n}\n\nexport default PopUp;","import React, { Component, useState } from 'react';\nimport './App.css';\nimport Map from './modules/Map';\nimport Information from './modules/Information';\nimport Header from './modules/Header';\nimport PopUp from './modules/PopUp';\nimport apiKey from './private/apiKey.json';\nimport axios from 'axios';\n\nfunction App(props) {\n  const [station, setStation] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [nodenm, setNodenm] = useState(null);\n  const [arravalInfo, setArravalInfo] = useState({});\n\n  const openModal = (_nodenm, _nodeid, _citycode) => {\n    getBusArravalInfo(_citycode, _nodeid);\n    setNodenm(_nodenm);\n  };\n\n  const getBusArravalInfo = (citycode, nodeid) => {\n    const serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\n    var url = \"?serviceKey=\" + serviceKey + \"&cityCode=\" + citycode + \"&nodeId=\" + nodeid;\n    axios.get('/busArravalInfo' + url)\n      .then(function (response) {\n        var responseText = JSON.parse(response.request.responseText);\n        if (responseText.response.header.resultCode == \"00\") {\n          // api 조회 정상적으로 완료 했을 때 \n          var items = responseText.response.body.items;\n          var newArr = {};\n          if (items != \"\") {\n            items.item.map(({ routeno, routeid, arrtime, arrprevstationcnt }) => {\n              var newInfo = {};\n              newInfo['routeno'] = routeno;\n              newInfo['arrtime'] = arrtime;\n              newInfo['arrprevstationcnt'] = arrprevstationcnt;\n\n              if (newArr[routeid] == null) {\n                newArr[routeid] = []\n              }\n              newArr[routeid].push(newInfo);\n            })\n          }\n          setArravalInfo(newArr);\n          setIsModalOpen(true);\n        } else {\n          console.log(responseText.response.header.resultCode)\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"contents\">\n        <Map station={station} setStation={setStation} />\n        <Information station={station} openModal={openModal} />\n        <PopUp isOpen={isModalOpen} close={() => setIsModalOpen(false)}\n          nodenm={nodenm} arravalInfo={arravalInfo}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}