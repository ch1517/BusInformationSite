{"version":3,"sources":["apiRequest.tsx","modules/map/state.tsx","modules/map/index.tsx","static/images/bus.tsx","modules/information/state.tsx","modules/information/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiRequest","url","axios","get","response","serviceKey","apiKey","station_key","MapEvent","position","setMap","setPosition","setApiState","setZoomLevel","setZoomState","map","useMap","useEffect","navigator","geolocation","getCurrentPosition","_position","coords","latitude","longitude","setView","getZoom","mapEvents","useMapEvents","zoomstart","zoomend","moveend","mapInfo","center","getCenter","southWest","getBounds","getSouthWest","northEast","getNorthEast","dragend","CustomTooltip","selectID","nodeid","nodenm","Tooltip","direction","opacity","permanent","interactive","className","alt","src","process","Map","zoomLevel","station","apiState","setStation","setSelectID","settingBusStop","vworld_url","vworld_key","useState","zoomState","checkLatLngOut","item","_southWest","_northEast","lat","lng","nodeidFiltering","result","forEach","name","includes","fetcher","args","undefined","header","data","body","resultCode","items","newData","Array","isArray","push","console","log","useSWR","stations","stationsState","error","stationsMutate","mutate","useStations","mapIcon","leaflet","icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","MapContainer","zoom","scrollWheelZoom","TileLayer","maxZoom","maxNativeZoom","attribution","length","index","citycode","gpslati","gpslong","Marker","toString","eventHandlers","click","tooltipClick","BusSVG","props","version","xmlns","width","height","viewBox","preserveAspectRatio","transform","fill","stroke","d","getRouteInfoIem","routeid","parameter","Information","mapMode","selectBusStop","setMapMode","refreshTime","setRefreshTime","selectRoute","setSelectRoute","getBusArravalInfoFetcher","newArr","Promise","all","routeno","arrtime","arrprevstationcnt","newInfo","routeInfo","sort","x","y","refreshInterval","arravalInfo","arravalInfoState","isError","arravalInfoMutate","useArravalInfo","getBusInfoByRouteIdFecher","nodeData","param","busStopList","routeInfoState","useRouteInfo","getRouteAcctoBusLcListFetcher","arravalInRoute","arravalInRouteState","arravalInRouteMutate","useArravalInRoute","getBusColor","routetp","busColor","date","Date","getHours","padStart","getMinutes","refreshTimeSave","convertVehicleTime","time","substr","onClick","Math","floor","startnodenm","endnodenm","BusArravalInfo","arravalList","startTime","startvehicletime","endTime","endvehicletime","arravalInRoutetmp","nodeord","intervaltime","intervalsattime","intervalsuntime","style","borderColor","Object","keys","color","vehicleno","slice","nodeno","InfoComponent","App","setSelectBusStop","_citycode","_gpslati","_gpslong","_nodeid","_nodenm","busStop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.979336d6.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\n\nexport const apiRequest = async (url: string): Promise<AxiosResponse<any>> => {\n  try{\n    const response = await axios.get(`http://apis.data.go.kr/1613000${url}`);\n    return response;\n  } catch(e: any){\n    return e;\n  }\n}","import { apiRequest } from '../../apiRequest';\nimport { LatLng } from 'leaflet';\nimport useSWR from 'swr';\nimport apiKey from '../../private/apiKey.json';\nimport { MapInfoInterface } from './interface';\n\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\nexport const useStations = (position: [number, number], map: MapInfoInterface | null, apiState: boolean) => {\n  // 화면의 latlng 내에 있는지 체크\n  const checkLatLngOut = (item: any, _southWest: LatLng, _northEast: LatLng) => {\n    if (item[\"lat\"] < _southWest.lat || item[\"lat\"] > _northEast.lat\n      || item[\"lng\"] < _southWest.lng || item[\"lng\"] > _northEast.lng)\n      return false;\n    return true;\n  }\n  /**\n   * 정류장 정보가 두 개씩 나오는 경우 하나 필터링\n   * @param nodeid \n   * @returns \n   */\n  const nodeidFiltering = (nodeid: string) => {\n    const ignoreList = ['GHB', 'GOB'];\n    let result = true;\n    ignoreList.forEach(name => {\n      if (nodeid.includes(name)) {\n        result = false;\n        return;\n      }\n    })\n    return result;\n  }\n  const fetcher = async (url: string, args: string) => {\n    const southWest = map!.southWest;\n    const northEast = map!.northEast;\n    if (southWest !== undefined && northEast !== undefined) {\n      try {\n        const response = await apiRequest(`${url}?serviceKey=${serviceKey}&${args}`);\n        let header = response.data.response.header;\n        let data = response.data.response.body;\n        if (header.resultCode === \"00\" || header.resultCode === 0) {\n          // api 조회 정상적으로 완료 했을 때 \n          let items = data.items.item;\n          let newData: any[] = [];\n          if (items == null || items === undefined) {\n            newData = [];\n          } else if (Array.isArray(items)) {\n            items.forEach((item) => {\n              if (checkLatLngOut(item, southWest, northEast) && nodeidFiltering(item.nodeid)) {\n                newData.push(item);\n              }\n            });\n          } else {\n            if (!checkLatLngOut(items, southWest, northEast)) {\n              newData = [items];\n            } else {\n              newData = [];\n            }\n          }\n          return newData;\n        } else {\n          console.log(data);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n  const { data, error, mutate } = useSWR(apiState ? ['/BusSttnInfoInqireService/getCrdntPrxmtSttnList', `gpsLati=${position[0]}&gpsLong=${position[1]}`] : null, fetcher);\n\n  return {\n    stations: data,\n    stationsState: !error && !data,\n    stationsMutate: mutate\n  }\n}\n","import React from 'react';\nimport { MapContainer, TileLayer, Marker, useMap, useMapEvents, Tooltip } from 'react-leaflet';\nimport { useState, useEffect } from \"react\";\nimport 'leaflet/dist/leaflet.css';\nimport leaflet from 'leaflet';\nimport { MapInfoInterface, MapInterface } from './interface';\nimport { useStations } from './state';\nimport apiKey from '../../private/apiKey.json';\nimport './style.scss';\n\ninterface MapEventProps {\n  position: [number, number];\n  setMap: (map: MapInfoInterface) => void;\n  setPosition: (position: [number, number]) => void;\n  setApiState: (apiState: boolean) => void;\n  setZoomLevel: (zoomLevel: number) => void;\n  setZoomState: (zoomState: boolean) => void;\n}\n\nconst MapEvent: React.FC<MapEventProps> = ({ position, setMap, setPosition, setApiState, setZoomLevel, setZoomState }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((_position) => {\n      setPosition([_position.coords.latitude, _position.coords.longitude]);\n    });\n  }, []);\n\n  useEffect(() => {\n    map.setView(position, map.getZoom());\n  }, [position]);\n\n  const mapEvents = useMapEvents({\n    zoomstart: () => {\n      setApiState(false);\n      setZoomState(false);\n    },\n    // 지도 zoom 종료\n    zoomend: () => {\n      setZoomLevel(mapEvents.getZoom()); // 현재 지도의 center lat, lng 가져오기\n      setApiState(true);\n      setZoomState(true);\n    },\n    // 지도 움직임 종료\n    moveend: () => {\n      let mapInfo: MapInfoInterface = {};\n      mapInfo.center = map.getCenter();\n      mapInfo.southWest = map.getBounds().getSouthWest();\n      mapInfo.northEast = map.getBounds().getNorthEast();\n      setMap(mapInfo);\n      // costomEvent(mapEvents.getZoom());\n    },\n    // 스크롤로 이동할 때 false\n    dragend: () => {\n      setApiState(true);\n      setZoomState(true);\n    }\n  });\n  return <></>\n}\ninterface CustomTooltipProps {\n  selectID: string;\n  nodeid: string;\n  nodenm: string;\n}\nconst CustomTooltip: React.FC<CustomTooltipProps> = ({ selectID, nodeid, nodenm }) => {\n  return (\n    <Tooltip direction=\"top\" opacity={1} permanent interactive>\n      <div className={selectID === nodeid ? \"select\" : \"\"}>\n        <div><img alt=\"\" className=\"busIcon\" src={process.env.PUBLIC_URL + selectID === nodeid ? '/marker.png' : '/marker_white.png'} /></div>\n        <div>\n          <span>{nodenm}</span>\n          <span>{nodeid}</span>\n        </div>\n      </div>\n    </Tooltip>\n  )\n}\nconst Map: React.FC<MapInterface> = ({ position, zoomLevel, station, selectID, apiState, setPosition, setZoomLevel, setStation, setSelectID, settingBusStop, setApiState }) => {\n  const BASE_ZOOM_LEVEL = 17;\n  const vworld_url = `https://api.vworld.kr/req/wmts/1.0.0/${apiKey.vworld_key}/Base/{z}/{y}/{x}.png`;\n\n  const [zoomState, setZoomState] = useState(true);\n  const [map, setMap] = useState<MapInfoInterface | null>(null);\n  const { stations } = useStations(position, map, apiState);\n\n  useEffect(() => {\n    if (typeof stations !== 'undefined')\n      setStation(stations);\n  }, [stations]);\n\n  useEffect(() => {\n    if (map !== null && zoomLevel >= BASE_ZOOM_LEVEL && apiState)\n      setPosition([map.center![\"lat\"], map.center![\"lng\"]]);\n  }, [map]);\n\n  let mapIcon = leaflet.icon({\n    iconUrl: process.env.PUBLIC_URL + '/marker.png',\n    iconRetinaUrl: process.env.PUBLIC_URL + '/marker.png',\n    iconAnchor: [15, 15],\n    popupAnchor: [0, 0],\n    iconSize: [30, 30],\n  });\n\n  let tooltipClick = (citycode: number, gpslati: number, gpslong: number, nodenm: string, nodeid: string) => {\n    setSelectID(nodeid);\n    settingBusStop(citycode, gpslati, gpslong, nodeid, nodenm);\n  }\n\n  return (\n    <div className=\"map-container\">\n      {zoomLevel < BASE_ZOOM_LEVEL ? <div className=\"alert-box\"><h5>조금 더 가까이 이동해주세요</h5></div> : <div></div>}\n      <MapContainer center={position} zoom={zoomLevel} scrollWheelZoom={true}>\n        <TileLayer maxZoom={22} maxNativeZoom={18}\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url={vworld_url}\n        />\n        <MapEvent setApiState={setApiState}\n          position={position} setPosition={setPosition} setMap={setMap}\n          setZoomLevel={setZoomLevel} setZoomState={setZoomState} />\n        {/* zoom 중인 경우 marker 표시를 안하기 위해서 apiState 추가 */}\n        {zoomState\n          && zoomLevel >= BASE_ZOOM_LEVEL\n          && station.length > 0 &&\n          station.map(({ citycode, gpslati, gpslong, nodeid, nodenm }, index) => {\n            return (\n              <Marker position={[gpslati.toString(), gpslong.toString()]} icon={mapIcon} key={index}\n                eventHandlers={{ click: () => tooltipClick(citycode, gpslati, gpslong, nodenm, nodeid) }}\n              >\n                <CustomTooltip nodenm={nodenm} nodeid={nodeid} selectID={selectID} />\n              </Marker>\n            )\n          })}\n      </MapContainer>\n    </div >\n  )\n}\n\n\nexport default Map;\n","export const BusSVG = (props: any) => {\n    return (\n        <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"512.000000pt\" height=\"512.000000pt\" viewBox=\"0 0 512.000000 512.000000\"\n            preserveAspectRatio=\"xMidYMid meet\">\n\n            <g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\"\n                fill={props.fill} stroke=\"none\">\n                <path d=\"M838 5104 c-169 -40 -318 -174 -381 -341 -21 -57 -22 -71 -27 -602\n   l-5 -544 -41 -12 c-117 -35 -253 -142 -312 -248 -60 -106 -67 -143 -67 -357 0\n   -189 1 -197 26 -251 57 -121 154 -180 307 -187 l92 -4 0 -837 c0 -921 -2 -894\n   62 -1013 60 -113 194 -223 316 -259 l42 -12 0 -57 c0 -170 69 -296 194 -352\n   50 -22 59 -23 341 -23 l290 0 56 26 c121 57 180 154 187 307 l4 92 638 0 638\n   0 4 -93 c7 -152 66 -249 187 -306 l56 -26 290 0 c282 0 291 1 341 23 125 56\n   194 182 194 352 l0 57 43 12 c121 36 255 146 315 259 64 119 62 92 62 1013 l0\n   837 93 4 c152 7 249 66 306 187 25 54 26 62 26 251 0 214 -7 251 -67 357 -59\n   106 -195 213 -312 248 l-41 12 -5 544 c-5 531 -6 545 -27 602 -64 169 -213\n   301 -385 342 -91 21 -3352 21 -3440 -1z m3032 -443 c61 -32 117 -86 148 -146\n   23 -43 27 -62 27 -140 0 -106 -20 -158 -88 -225 -51 -52 -96 -75 -172 -89 -82\n   -15 -2368 -15 -2450 0 -76 14 -121 37 -172 89 -68 67 -88 119 -88 225 0 75 4\n   98 24 135 42 81 117 145 201 171 14 4 588 7 1275 6 l1250 -2 45 -24z m206\n   -849 c58 -27 123 -89 153 -148 39 -76 42 -131 39 -717 l-3 -562 -33 -67 c-37\n   -76 -82 -120 -162 -157 l-55 -26 -1455 0 -1455 0 -67 33 c-76 37 -120 82 -157\n   162 l-26 55 -3 562 c-3 586 0 642 39 717 25 50 83 112 124 134 80 42 44 41\n   1560 39 l1450 -2 51 -23z m-2561 -2137 c135 -59 210 -200 183 -345 -13 -71\n   -37 -116 -88 -167 -67 -68 -119 -88 -225 -88 -75 0 -98 4 -135 24 -61 32 -116\n   86 -148 146 -23 43 -27 62 -27 140 0 106 20 158 88 225 50 51 86 70 157 86 69\n   15 130 8 195 -21z m2270 24 c76 -14 121 -37 172 -89 68 -67 88 -119 88 -225 0\n   -78 -4 -97 -27 -140 -32 -60 -87 -114 -148 -146 -65 -34 -204 -34 -272 -1 -55\n   27 -122 91 -148 142 -96 188 22 425 229 460 25 4 46 8 47 9 0 0 27 -4 59 -10z\"/>\n            </g>\n        </svg>\n    )\n}\n\n","import apiKey from '../../private/apiKey.json';\nimport { apiRequest } from '../../apiRequest';\nimport useSWR from 'swr';\nimport { BusStopInterface, RouteInformation } from './interface';\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\n\n/**\n * 노선의 기본정보(종점, 출발점, 버스종류)를 반환하는 API 호출\n * @param routeno \n * @param routeid \n * @returns \n */\nconst getRouteInfoIem = async (citycode: number, routeid: string) => {\n    const parameter = `?serviceKey=${serviceKey}&cityCode=${citycode}&routeId=${routeid}`;\n    const url = `/BusRouteInfoInqireService/getRouteInfoIem${parameter}`;\n    try {\n        const response = await apiRequest(url);\n        let header = response.data.response.header;\n        let data = response.data.response.body;\n        // api 조회 정상적으로 완료 했을 때 \n        if (header.resultCode === \"00\" || header.resultCode === 0) {\n            let item = data.items.item;\n            return item;\n        }\n        return header.resultCode;\n    } catch (e) {\n        console.log(e);\n        return -1;\n    }\n}\nexport const useArravalInfo = (selectBusStop: BusStopInterface | null, mapMode: number) => {\n    const getBusArravalInfoFetcher = async (url: string, args: string) => {\n        try {\n            const response = await apiRequest(`${url}?serviceKey=${serviceKey}&${args}`);\n            let header = response.data.response.header;\n            let data = response.data.response.body;\n            // api 조회 정상적으로 완료 했을 때 \n            if (header.resultCode === \"00\" || header.resultCode === 0) {\n                var items = data.items;\n                var newArr: any = [];\n                if (items['item'] != null) {\n                    items = items.item;\n                    // 배열이며, 길이가 0이 아닐 때\n                    if (items.length !== 0 && Array.isArray(items)) {\n                        newArr = await Promise.all(items.map(async ({ routeno, routeid, arrtime, arrprevstationcnt }) => {\n                            var newInfo: RouteInformation = {};\n                            newInfo['routeid'] = routeid;\n                            newInfo['routeno'] = routeno;\n                            newInfo['arrtime'] = arrtime;\n                            newInfo['arrprevstationcnt'] = arrprevstationcnt;\n                            let routeInfo = await getRouteInfoIem(selectBusStop!.citycode, routeid);\n                            newInfo['routeInfo'] = routeInfo;\n                            return newInfo;\n                        }))\n                    } else if (typeof (items) === 'object') {\n                        let newInfo: RouteInformation = {};\n                        newInfo['routeid'] = items['routeid'];\n                        newInfo['routeno'] = items['routeno'];\n                        newInfo['arrtime'] = items['arrtime'];\n                        newInfo['arrprevstationcnt'] = items['arrprevstationcnt'];\n                        let routeInfo = await getRouteInfoIem(selectBusStop!.citycode, items['routeid']);\n                        newInfo['routeInfo'] = routeInfo;\n                        newArr.push(newInfo);\n                    } else {\n                        console.log(items);\n                    }\n                }\n                // 도착 시간 순으로 정렬\n                newArr.sort((x: RouteInformation, y: RouteInformation) => x.arrtime! - y.arrtime!);\n                return newArr;\n            } else {\n                console.log(data.header.resultCode)\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    const { data, error, mutate } = useSWR(\n        selectBusStop !== null && mapMode === 1 ? ['/ArvlInfoInqireService/getSttnAcctoArvlPrearngeInfoList',\n            `&cityCode=${selectBusStop!.citycode}&nodeId=${selectBusStop!.nodeid}`] : null, getBusArravalInfoFetcher, { refreshInterval: 60000 });\n\n    return {\n        arravalInfo: data,\n        arravalInfoState: !error && !data,\n        isError: error,\n        arravalInfoMutate: mutate\n    }\n}\nexport const useRouteInfo = (selectBusStop: BusStopInterface | null, mapMode: number, selectRoute: RouteInformation | null) => {\n    //노선별로 버스의 GPS 위치정보의 목록을 조회 \n    const getBusInfoByRouteIdFecher = async (url: string, nodeData: RouteInformation) => {\n        const param = `cityCode=${selectBusStop?.citycode}&routeId=${nodeData.routeid}&numOfRows=500`;\n        try {\n            const response = await apiRequest(`${url}?serviceKey=${serviceKey}&${param}`);\n            let header = response.data.response.header;\n            let data = response.data.response.body;\n            // api 조회 정상적으로 완료 했을 때 \n            if (header.resultCode === \"00\" || header.resultCode === 0) {\n                let item = data.items?.item;\n                if (nodeData.routeInfo)\n                    nodeData.routeInfo.busStopList = item ? item : [];\n                else\n                    nodeData.routeInfo = undefined;\n                return nodeData;\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    // route information\n    const { data, error } = useSWR(\n        selectBusStop !== null && selectRoute !== null && mapMode === 2 ?\n            ['/BusRouteInfoInqireService/getRouteAcctoThrghSttnList', selectRoute] : null, getBusInfoByRouteIdFecher)\n\n    return {\n        routeInfo: data,\n        routeInfoState: !error && !data,\n        isError: error\n    }\n}\nexport const useArravalInRoute = (selectBusStop: BusStopInterface | null, mapMode: number, selectRoute: RouteInformation | null) => {\n    /**\n      * 노선별로 버스의 GPS 위치정보의 목록을 조회\n      */\n    const getRouteAcctoBusLcListFetcher = async (url: string, nodeData: RouteInformation) => {\n        const param = `cityCode=${selectBusStop!.citycode}&routeId=${nodeData.routeid}`;\n        try {\n            const response = await apiRequest(`${url}?serviceKey=${serviceKey}&${param}`);\n            let header = response.data.response.header;\n            let data = response.data.response.body;\n            // api 조회 정상적으로 완료 했을 때 \n            if (header.resultCode === \"00\" || header.resultCode === 0) {\n                let item = data.items.item;\n                return item;\n            }\n        } catch (e) {\n            console.log(e);\n        }\n\n    }\n    const { data, error, mutate } = useSWR(\n        selectBusStop !== null && selectRoute !== null && mapMode === 2 ?\n            ['/BusLcInfoInqireService/getRouteAcctoBusLcList', selectRoute] : null, getRouteAcctoBusLcListFetcher, { refreshInterval: 60000 })\n\n    return {\n        arravalInRoute: data,\n        arravalInRouteState: !error && !data,\n        arravalInRouteMutate: mutate\n    }\n}\n","\nimport React, { useEffect, useState } from 'react';\nimport RotateLoader from \"react-spinners/RotateLoader\";\nimport './style.scss';\nimport { BusSVG } from '../../static/images/bus';\nimport { BusStopInterface, InformationProps, RouteInformation } from './interface';\nimport { useArravalInfo, useArravalInRoute, useRouteInfo } from './state';\n\nconst Information: React.FC<InformationProps> = ({ mapMode, station, selectBusStop, settingBusStop, setMapMode }) => {\n  const [refreshTime, setRefreshTime] = useState<string | null>(null);\n  const [selectRoute, setSelectRoute] = useState<RouteInformation | null>(null);\n  const { arravalInfo, arravalInfoState, arravalInfoMutate } = useArravalInfo(selectBusStop, mapMode);\n  const { routeInfo, routeInfoState } = useRouteInfo(selectBusStop, mapMode, selectRoute);\n  const { arravalInRoute, arravalInRouteState, arravalInRouteMutate } = useArravalInRoute(selectBusStop, mapMode, selectRoute);\n\n  /**\n   * 버스 노선 종류에 따른 색 반환\n   * @param routetp 노선 종류\n   * @returns \n   */\n  const getBusColor = (routetp: string) => {\n    let busColor: string = '#146ACC';\n    switch (routetp) {\n      case \"간선버스\":\n        busColor = \"#008039\";\n        break;\n      case \"좌석버스\":\n      case \"급행버스\":\n      case \"광역버스\":\n        busColor = \"#CC1100\";\n        break;\n      default:\n        break;\n    }\n    return busColor;\n  }\n\n  const BusArravalInfo = (data: any, index: number) => {\n    const time = Math.floor(data.arrtime! / 60);\n    let busColor: string = getBusColor(data?.routeInfo?.routetp);\n    return (\n      <div key={index} onClick={() => {\n        setMapMode(2);\n        setSelectRoute(data);\n        // 도착 정보 다시 가져오는 API 호출\n        arravalInRouteMutate();\n      }}>\n        <BusSVG fill={busColor} />\n        <div className=\"info-div\">\n          <div className=\"route-info\">\n            <div className=\"route-number\">\n              {data.routeno}\n            </div>\n            {data.routeInfo && typeof data.routeInfo !== \"number\" &&\n              <div className=\"route-start-end\">\n                {`${data.routeInfo.startnodenm}↔${data.routeInfo.endnodenm}`}\n              </div>\n            }\n          </div>\n          {/* <div>{data.routeInfo.routetp}</div> */}\n          <div className=\"arraval-info\">\n            <span>{time < 3 ? (\"잠시 후 도착\") : (`${time}분`)}</span>\n            <span>{data.arrprevstationcnt}정류장</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const refreshTimeSave = () => {\n    const date = new Date();\n    setRefreshTime(`${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`);\n  }\n\n  useEffect(() => {\n    // X 눌러서 다시 bus stop list로 돌아올 때 arravalInfo 초기화\n    if (mapMode === 0 && typeof arravalInRoute !== \"undefined\" && arravalInfo.length > 0) {\n      arravalInfoMutate([]);\n    }\n  }, [mapMode]);\n\n  useEffect(() => {\n    refreshTimeSave();\n  }, [arravalInfo, arravalInRoute]);\n\n  const convertVehicleTime = (time: string | number) => {\n    if (!time) return '';\n    let result = typeof time === \"number\" ? time.toString().padStart(4, '0') : time;\n    result = `${result.substr(0, 2)}:${result.substr(2)}`\n    return result;\n  }\n  const InfoComponent = () => {\n    switch (mapMode) {\n      // BusStopList\n      case 0:\n        return (\n          <div className=\"information-table\">\n            <div className=\"bus-stop-list\">\n              {/* Map mode false인 경우 버스 노선 그리기  */}\n              {station.length > 0 &&\n                station.map(({ citycode, gpslati, gpslong, nodenm, nodeid }: BusStopInterface, index) => {\n                  return (\n                    <div key={index} onClick={() => settingBusStop(citycode, gpslati, gpslong, nodeid, nodenm)}>\n                      <div className='info'>\n                        <img src={process.env.PUBLIC_URL + '/marker.png'} alt=\"\" />\n                        <h5>{nodenm}({nodeid})</h5>\n                      </div>\n                    </div>\n                  )\n                })\n              }\n            </div>\n          </div>\n        )\n      // BusStopInformation\n      case 1:\n        return (\n          <>\n            <div className=\"bus-stop-container\">\n              <div className=\"bus-stop-name\">{selectBusStop!.nodenm}</div>\n              <div className=\"bus-stop-information\">\n                <div className=\"refresh-time\">\n                  {refreshTime} 기준\n                  <button\n                    onClick={() => {\n                      arravalInfoMutate();\n                    }\n                    }><i className=\"fas fa-sync-alt\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            {arravalInfoState ?\n              <div className=\"loading\"><RotateLoader /> </div>\n              :\n              <div className=\"bus-arraval-list\">\n                {arravalInfo.length > 0 ?\n                  arravalInfo.map((data: any, index: number) => {\n                    return BusArravalInfo(data, index);\n                  })\n                  :\n                  <span>도착 예정 정보 없음</span>\n                }\n              </div >\n            }\n          </>\n        )\n      case 2:\n        if (routeInfoState) return <div className=\"loading\"><RotateLoader /> </div>;\n        let startTime = convertVehicleTime(routeInfo?.routeInfo?.startvehicletime);\n        let endTime = convertVehicleTime(routeInfo?.routeInfo?.endvehicletime);\n        let arravalList: any;\n        if (arravalInRouteState) arravalList = [];\n        else {\n          arravalList = {};\n          let arravalInRoutetmp = arravalInRoute;\n          // 만약 arravalInRoute가 array가 아닌 object라면\n          if (arravalInRoute && !Array.isArray(arravalInRoute))\n            arravalInRoutetmp = [arravalInRoute];\n          arravalInRoutetmp?.forEach((data: any) => arravalList[data.nodeord] = data);\n        }\n        let busColor: string = getBusColor(routeInfo?.routeInfo?.routetp);\n        return (\n          <div className=\"route-container\">\n            <div className=\"bus-stop-container\">\n              <div className=\"bus-stop-name\">\n                <BusSVG fill={busColor} />\n                {routeInfo!.routeno}\n              </div>\n              {routeInfo?.routeInfo &&\n                <div className=\"route-info-container\">\n                  <div className=\"route-info-item\">\n                    <div className=\"title\">노선유형</div>\n                    <div className=\"information\">{routeInfo?.routeInfo?.routetp}</div>\n                  </div>\n                  <div className=\"route-info-item\">\n                    <div className=\"title\">운행시간</div>\n                    <div className=\"information\">첫차 {startTime}, 막차 {endTime}</div>\n                  </div>\n                  <div className=\"route-info-item\">\n                    <div className=\"title\">배차간격</div>\n                    <div className=\"information\">평일 {routeInfo?.routeInfo?.intervaltime ?? ''}분, 토요일 {routeInfo?.routeInfo?.intervalsattime ?? ''}분, 일요일 {routeInfo?.routeInfo?.intervalsuntime ?? ''}분</div>\n                  </div>\n                </div>\n              }\n              <div className=\"bus-stop-information\">\n                <div className=\"refresh-time\">\n                  {refreshTime} 기준\n                  <button\n                    onClick={() => arravalInRouteMutate()}><i className=\"fas fa-sync-alt\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"route-list\">\n              {routeInfo!.routeInfo?.busStopList.map((data: any, index: number) => {\n                return (\n                  <div className=\"route-item\" key={index}>\n                    <div className=\"route-line\" style={{ borderColor: busColor }}>\n                      {Object.keys(arravalList).includes(data.nodeord.toString()) ?\n                        <>\n                          <div className='bus-logo' style={{ borderColor: busColor }}><BusSVG fill={busColor} /></div>\n                          <div className='bus-number' style={{ color: busColor, borderColor: busColor }}>{arravalList[data.nodeord.toString()].vehicleno.slice(-7)}</div>\n                        </>\n                        : <></>\n                      }\n                    </div>\n                    <div className=\"bus-stop-text\">\n                      <div className=\"node-name\">{data.nodenm}\n                        {routeInfo!.routeInfo?.startnodenm === data.nodenm && <div className=\"start-end-label\">기점</div>}\n                        {routeInfo!.routeInfo?.endnodenm === data.nodenm && <div className=\"start-end-label\">종점</div>}\n                      </div>\n                      <div className=\"node-number\">{data.nodeno}</div>\n                    </div>\n                  </div>\n                )\n              }\n              )}\n            </div>\n          </div >\n        )\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <div className=\"information-container\">\n      {InfoComponent()}\n    </div>\n  )\n}\n\nexport default Information;","import { useState } from 'react';\nimport './App.scss';\nimport Map from './modules/map';\nimport Information from './modules/information';\nimport Header from './modules/Header';\n\ninterface BusStopInterface {\n  citycode: number;\n  gpslati: number;\n  gpslong: number;\n  nodeid: string;\n  nodenm: string;\n  // nodeno: number;\n}\nconst App = () => {\n  const [zoomLevel, setZoomLevel] = useState<number>(16); // initial zoom level provided for MapContainer\n  const [position, setPosition] = useState<[number, number]>([36.37412735693837, 127.36563659840922]);\n  const [station, setStation] = useState<any[]>([]);\n  const [selectBusStop, setSelectBusStop] = useState<BusStopInterface | null>(null);\n  const [selectID, setSelectID] = useState<string>(\"-1\");\n  // True 인 경우 주변 정류장 정보 API 호출 \n  const [mapMode, setMapMode] = useState<number>(0);\n  const [apiState, setApiState] = useState(true);\n\n  const settingBusStop = (_citycode: number, _gpslati: number, _gpslong: number, _nodeid: string, _nodenm: string) => {\n    let busStop: BusStopInterface = {\n      citycode: _citycode,\n      gpslati: _gpslati,\n      gpslong: _gpslong,\n      nodeid: _nodeid,\n      nodenm: _nodenm\n    };\n    setPosition([_gpslati, _gpslong]);\n    setSelectBusStop(busStop);\n    setSelectID(_nodeid);\n    setZoomLevel(18);\n    setApiState(false);\n    setMapMode(1);\n  };\n\n  return (\n    <div className=\"App\">\n      {/* <Header /> */}\n      <div className=\"contents\">\n        <Map station={station} setStation={setStation}\n          settingBusStop={settingBusStop}\n          position={position} setPosition={setPosition}\n          selectID={selectID} setSelectID={setSelectID}\n          zoomLevel={zoomLevel} setZoomLevel={setZoomLevel}\n          apiState={apiState} setApiState={setApiState} />\n        <Information station={station} settingBusStop={settingBusStop} setMapMode={setMapMode}\n          mapMode={mapMode} selectBusStop={selectBusStop} />\n        <button className=\"mode-change-button\"\n          onClick={() => {\n            if (mapMode !== 0)\n              setMapMode(mapMode - 1);\n          }}>\n          <i className=\"fas fa-times\"></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}