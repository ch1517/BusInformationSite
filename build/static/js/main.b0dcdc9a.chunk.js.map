{"version":3,"sources":["apiRequest.tsx","modules/Map.tsx","modules/Information.tsx","modules/Header.tsx","modules/PopUp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiRequest","url","axios","get","process","then","response","catch","err","serviceKey","apiKey","station_key","checkLatLngOut","item","_southWest","_northEast","lat","lng","MapEvent","apiState","mapMode","setApiState","setStation","setZoomLevel","map","useMap","costomEvent","zoomLevel","center","gpsLati","gpsLong","parameter","header","data","body","resultCode","items","newData","undefined","Array","isArray","forEach","push","console","log","error","getBusStationInfo","getCenter","getBounds","getSouthWest","getNorthEast","mapEvents","useMapEvents","zoomstart","zoomend","getZoom","moveend","dragend","CustomTooltip","selectID","nodeid","nodenm","Tooltip","direction","opacity","permanent","interactive","className","alt","src","Map","mapState","position","station","setMapState","setSelectID","openModal","vworld_url","vworld_key","useState","mapIcon","leaflet","icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","useEffect","BASE_ZOOM_LEVEL","MapContainer","zoom","scrollWheelZoom","TileLayer","maxZoom","maxNativeZoom","attribution","MapConsumer","setView","length","index","citycode","gpslati","gpslong","Marker","toString","eventHandlers","click","tooltipClick","Information","onClick","App","BusArravalInfo","array","arrtime","arrprevstationcnt","time","Math","floor","PopUp","isOpen","selectBusStop","setIsModalOpen","setMapMode","arravalInfo","setArravalInfo","getBusArravalInfo","newArr","routeno","routeid","newInfo","Object","keys","key","setPosition","isModalOpen","setSelectBusStop","_citycode","_gpslati","_gpslong","_nodeid","_nodenm","busStop","Header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0dcdc9a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const apiRequest = (url: string) => {\n  return axios.get(`${process.env.REACT_APP_API_URL}${url}`)\n    .then(response => {\n      return response;\n    })\n    .catch(err => {\n      return err;\n    })\n}","import React from 'react';\nimport { MapContainer, TileLayer, Marker, MapConsumer, useMap, useMapEvents, Tooltip } from 'react-leaflet';\nimport { useState, useEffect } from \"react\";\nimport 'leaflet/dist/leaflet.css';\nimport leaflet from 'leaflet';\nimport apiKey from '../private/apiKey.json';\nimport { apiRequest } from '../apiRequest';\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\nconst BASE_ZOOM_LEVEL = 13;\n\ninterface LatLngInterface {\n  lat: number;\n  lng: number;\n}\n\n// 화면의 latlng 내에 있는지 체크\nconst checkLatLngOut = (item: any, _southWest: LatLngInterface, _northEast: LatLngInterface) => {\n  if (item[\"gpslati\"] < _southWest.lat || item[\"gpslati\"] > _northEast.lat\n    || item[\"gpslong\"] < _southWest.lng || item[\"gpslong\"] > _northEast.lng)\n    return false;\n  return true;\n}\n// api request [나중에 분리]\nconst getBusStationInfo = (setStation: (station: any[]) => void, apiState: boolean, center: LatLngInterface, _southWest: LatLngInterface, _northEast: LatLngInterface) => {\n  let gpsLati = center[\"lat\"];\n  let gpsLong = center[\"lng\"];\n  let parameter = `?serviceKey=${serviceKey}&gpsLati=${gpsLati}&gpsLong=${gpsLong}`;\n  let url = `/BusSttnInfoInqireService/getCrdntPrxmtSttnList${parameter}`;\n  if (apiState) {\n    apiRequest(url)\n      .then((response) => {\n        let header = response.data.response.header;\n        let data = response.data.response.body;\n        if (header.resultCode === \"00\" || header.resultCode === 0) {\n          // api 조회 정상적으로 완료 했을 때 \n          let items = data.items.item;\n          let newData: any[] = [];\n          if (items == null || items === undefined) {\n            newData = [];\n          } else if (Array.isArray(items)) {\n            items.forEach((item) => {\n              if (checkLatLngOut(item, _southWest, _northEast)) {\n                newData.push(item);\n              }\n            });\n          } else {\n            if (!checkLatLngOut(items, _southWest, _northEast)) {\n              newData = [items];\n            } else {\n              newData = [];\n            }\n          }\n          setStation(newData);\n        } else {\n          console.log(data);\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n}\ninterface MapEventProps {\n  apiState: boolean;\n  mapMode: boolean;\n  setApiState: (apiState: boolean) => void;\n  setStation: (station: any[]) => void;\n  setZoomLevel: (zoomLevel: number) => void;\n}\n\nconst MapEvent: React.FC<MapEventProps> = ({ apiState, mapMode, setApiState, setStation, setZoomLevel }) => {\n  const map = useMap();\n  // var state = true; // 초기화 시 한번만 실행하기 위한 state 변수\n  const costomEvent = (zoomLevel: number) => {\n    if (zoomLevel > BASE_ZOOM_LEVEL && mapMode) {\n      getBusStationInfo(setStation, apiState, map.getCenter(), map.getBounds().getSouthWest(), map.getBounds().getNorthEast());\n      setApiState(true);\n    }\n  }\n  const mapEvents = useMapEvents({\n    zoomstart: () => {\n      setApiState(false);\n    },\n    // 지도 zoom 종료\n    zoomend: () => {\n      setZoomLevel(mapEvents.getZoom()); // 현재 지도의 center lat, lng 가져오기\n    },\n    // 지도 움직임 종료\n    moveend: () => {\n      costomEvent(mapEvents.getZoom());\n    },\n    // 스크롤로 이동할 때 false\n    dragend: () => {\n      setApiState(true);\n    }\n  });\n  return <></>\n}\ninterface CustomTooltipProps {\n  selectID: string;\n  nodeid: string;\n  nodenm: string;\n}\nconst CustomTooltip: React.FC<CustomTooltipProps> = ({ selectID, nodeid, nodenm }) => {\n  return (\n    <Tooltip direction=\"top\" opacity={1} permanent interactive>\n      <div className={selectID === nodeid ? \"select\" : \"\"}>\n        <div><img alt=\"\" className=\"busIcon\" src={process.env.PUBLIC_URL + selectID === nodeid ? '/marker.png' : '/marker_white.png'} /></div>\n        <div>\n          <span>{nodenm}</span>\n          <span>{nodeid}</span>\n        </div>\n      </div>\n    </Tooltip>\n  )\n}\ninterface MapInterface {\n  zoomLevel: number;\n  mapState: boolean;\n  mapMode: boolean;\n  position: [number, number];\n  station: any[];\n  selectID: string;\n  setStation: (station: any[]) => void;\n  setZoomLevel: (zoomLevel: number) => void;\n  setMapState: (mapState: boolean) => void;\n  setSelectID: (selectID: string) => void;\n  openModal: (citycode: number, gpslati: number, gpslong: number, nodeid: string, nodenm: string) => void;\n}\nconst Map: React.FC<MapInterface> = ({ zoomLevel, mapState, mapMode, position, station, selectID, setZoomLevel, setStation, setMapState, setSelectID, openModal }) => {\n  const BASE_ZOOM_LEVEL = 15;\n  const vworld_url = `https://api.vworld.kr/req/wmts/1.0.0/${apiKey.vworld_key}/Base/{z}/{y}/{x}.png`;\n\n  var [apiState, setApiState] = useState(true);\n\n  let mapIcon = leaflet.icon({\n    iconUrl: process.env.PUBLIC_URL + '/marker.png',\n    iconRetinaUrl: process.env.PUBLIC_URL + '/marker.png',\n    iconAnchor: [15, 15],\n    popupAnchor: [0, 0],\n    iconSize: [30, 30],\n  });\n  let tooltipClick = (citycode: number, gpslati: number, gpslong: number, nodenm: string, nodeid: string) => {\n    setSelectID(nodeid);\n    openModal(citycode, gpslati, gpslong, nodeid, nodenm);\n  }\n\n  useEffect(() => {\n    console.log(zoomLevel >= BASE_ZOOM_LEVEL)\n  }, [zoomLevel]);\n\n  return (\n    <div className=\"map-container\">\n      {zoomLevel < BASE_ZOOM_LEVEL + 1 ? <div className=\"alert-box\"><h5>조금 더 가까이 이동해주세요</h5></div> : <div></div>}\n      <MapContainer center={position} zoom={zoomLevel} scrollWheelZoom={true}>\n        <TileLayer maxZoom={22} maxNativeZoom={18}\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url={vworld_url}\n        />\n        <MapEvent apiState={apiState} setApiState={setApiState} mapMode={mapMode} setZoomLevel={setZoomLevel} setStation={setStation} />\n        <MapConsumer>\n          {(map) => {\n            if (mapState) { // Marker 위치, zoomLevel 19로 지도 업데이트\n              map.setView(position, zoomLevel);\n              setApiState(false); // Marker 클릭 center 설정 시에는 api 호출 안함\n              setMapState(false);\n            }\n            return <></>\n          }}\n        </MapConsumer>\n        {/* zoom 중인 경우 marker 표시를 안하기 위해서 apiState 추가 */}\n        {mapMode && apiState && station.length > 0 &&\n          station.map(({ citycode, gpslati, gpslong, nodeid, nodenm }, index) => {\n            return (\n              <Marker position={[gpslati.toString(), gpslong.toString()]} icon={mapIcon} key={index}\n                eventHandlers={{ click: () => tooltipClick(citycode, gpslati, gpslong, nodenm, nodeid) }}\n              >\n                <CustomTooltip nodenm={nodenm} nodeid={nodeid} selectID={selectID} />\n              </Marker>\n            )\n          })}\n      </MapContainer>\n    </div >\n  )\n}\n\n\nexport default Map;\n","\nimport React from 'react';\n\ninterface BusStopInterface {\n  citycode: number;\n  gpslati: number;\n  gpslong: number;\n  nodeid: string;\n  nodenm: string;\n  // nodeno: number;\n}\ninterface InformationProps {\n  mapMode: boolean;\n  station: any[];\n  openModal: (citycode: number, gpslati: number, gpslong: number, nodeid: string, nodenm: string) => void;\n}\nconst Information: React.FC<InformationProps> = ({ mapMode, station, openModal }) => {\n  return (\n    <div className=\"information-container\">\n      {mapMode ? (\n        <div className=\"information-table\">\n          {/* Map mode false인 경우 버스 노선 그리기  */}\n          {station.length > 0 &&\n            station.map(({ citycode, gpslati, gpslong, nodenm, nodeid }: BusStopInterface, index) => {\n              return (\n                <div key={index} onClick={() => openModal(citycode, gpslati, gpslong, nodeid, nodenm)}>\n                  <div className='info'>\n                    <img src={process.env.PUBLIC_URL + '/marker.png'} alt=\"\" />\n                    <h5>{nodenm}({nodeid})</h5>\n                  </div>\n                </div>\n              )\n            })\n          }\n        </div>\n      )\n        : (\n          <div>구현해야할 내용</div>\n        )\n      }\n\n    </div >\n  )\n}\n\nexport default Information;","import '../App.css';\nconst App = () => {\n  return (\n    <header className=\"App-header\">\n      <div className=\"logo\">Bus Information</div>\n    </header>\n  );\n}\n\nexport default App;","\nimport React, { useEffect, useState } from 'react';\nimport apiKey from '../private/apiKey.json';\nimport { apiRequest } from '../apiRequest';\n\ninterface RouteInformation {\n  routeno?: string; // 노선번호\n  arrtime?: number; // 도착예정버스 도착예상시간[초]\n  arrprevstationcnt?: number; // 도착예정버스 남은 정류장 수\n}\ninterface BusArravalInfoProps {\n  array: RouteInformation[];\n}\ninterface RouteInformation {\n  routeno?: string; // 노선번호\n  arrtime?: number; // 도착예정버스 도착예상시간[초]\n  arrprevstationcnt?: number; // 도착예정버스 남은 정류장 수\n}\nconst BusArravalInfo: React.FC<BusArravalInfoProps> = ({ array }) => {\n  return (\n    <>\n      {array.map(({ arrtime, arrprevstationcnt }, index) => {\n        const time = Math.floor(arrtime! / 60);\n        return (\n          <div key={index}>\n            <span>{time < 3 ? (\"잠시 후 도착\") : (`${time}분 후`)}</span>\n            <span>{arrprevstationcnt} 정거장 전</span>\n          </div>\n        )\n      }\n      )}\n    </>\n  )\n}\n\ninterface BusStopInterface {\n  citycode: number;\n  gpslati: number;\n  gpslong: number;\n  nodeid: string;\n  nodenm: string;\n  // nodeno: number;\n}\n\ninterface PopUpProps {\n  isOpen: boolean;\n  selectBusStop: BusStopInterface | null;\n  setMapMode: (mapMode: boolean) => void;\n  setIsModalOpen: (openState: boolean) => void;\n}\nconst PopUp: React.FC<PopUpProps> = ({ isOpen, selectBusStop, setMapMode, setIsModalOpen }) => {\n  const [arravalInfo, setArravalInfo] = useState<any>([]);\n\n  useEffect(() => {\n    if (selectBusStop !== null) {\n      getBusArravalInfo();\n    };\n  }, [selectBusStop]);\n\n  const getBusArravalInfo = () => {\n    const serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\n    let parameter = `?serviceKey=${serviceKey}&cityCode=${selectBusStop!.citycode}&nodeId=${selectBusStop!.nodeid}`;\n    var url = `/ArvlInfoInqireService/getSttnAcctoArvlPrearngeInfoList${parameter}`;\n    apiRequest(url)\n      .then((response) => {\n        let header = response.data.response.header;\n        let data = response.data.response.body;\n        if (header.resultCode === \"00\" || header.resultCode === 0) {\n          // api 조회 정상적으로 완료 했을 때 \n          var items = data.items;\n          var newArr: any = {};\n          if (items['item'] != null) {\n            items = items.item;\n            // 배열이며, 길이가 0이 아닐 때\n            if (items.length !== 0 && Array.isArray(items)) {\n              items.forEach(({ routeno, routeid, arrtime, arrprevstationcnt }) => {\n                var newInfo: RouteInformation = {};\n                newInfo['routeno'] = routeno;\n                newInfo['arrtime'] = arrtime;\n                newInfo['arrprevstationcnt'] = arrprevstationcnt;\n\n                if (newArr[routeid] === undefined) {\n                  newArr[routeid] = [];\n                }\n                newArr[routeid].push(newInfo);\n              })\n\n            } else if (typeof (items) === 'object') {\n              let newInfo: RouteInformation = {};\n              var routeid = items['routeid'];\n              newInfo['routeno'] = items['routeno'];\n              newInfo['arrtime'] = items['arrtime'];\n              newInfo['arrprevstationcnt'] = items['arrprevstationcnt'];\n              if (newArr[routeid] === undefined) {\n                newArr[routeid] = [];\n              }\n              newArr[routeid].push(newInfo);\n            } else {\n              console.log(items);\n            }\n          }\n          setArravalInfo(newArr);\n          setIsModalOpen(true);\n        } else {\n          console.log(data.header.resultCode)\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  return (\n    <>{isOpen && (\n      <div className=\"modal-container \">\n        <div className=\"modal\">\n          <button onClick={() => setIsModalOpen(false)}>\n            <i className=\"fas fa-times\"></i>\n          </button>\n          <div className=\"info-content\">\n            <h3 className=\"station-name\">\n              <div className=\"name\">{selectBusStop!.nodenm}({selectBusStop!.nodeid})</div>\n              <div className=\"refresh\"\n                onClick={() => getBusArravalInfo()\n                }><i className=\"fas fa-sync-alt\"></i></div>\n            </h3>\n            <div className=\"arrival-info-container\">\n              {Object.keys(arravalInfo).length > 0 ?\n                Object.keys(arravalInfo).map((key, index) => {\n                  return (\n                    <div key={index} className=\"arrival-bus-info\" onClick={() => {\n                      // setMapMode(false);\n                      setIsModalOpen(false);\n                    }}>\n                      <span className=\"route-number\">{arravalInfo[key][0]['routeno']}번</span>\n                      <span className=\"arrival-bus-container\">\n                        <BusArravalInfo array={arravalInfo[key]} ></BusArravalInfo>\n                      </span>\n                    </div>\n                  )\n                })\n                :\n                <div className=\"arrival-bus-info\">\n                  도착 예정 정보없음\n                </div>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n    }\n    </>\n  )\n}\n\nexport default PopUp;\n\n","import { useState } from 'react';\nimport './App.css';\nimport Map from './modules/Map';\nimport Information from './modules/Information';\nimport Header from './modules/Header';\nimport PopUp from './modules/PopUp';\n\ninterface BusStopInterface {\n  citycode: number;\n  gpslati: number;\n  gpslong: number;\n  nodeid: string;\n  nodenm: string;\n  // nodeno: number;\n}\nconst App = () => {\n  const [zoomLevel, setZoomLevel] = useState<number>(16); // initial zoom level provided for MapContainer\n  const [position, setPosition] = useState<[number, number]>([36.37412735693837, 127.36563659840922]);\n  const [station, setStation] = useState<any[]>([]);\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [selectBusStop, setSelectBusStop] = useState<BusStopInterface | null>(null);\n  const [selectID, setSelectID] = useState<string>(\"-1\");\n  // True 인 경우 주변 정류장 정보 API 호출 \n  const [mapMode, setMapMode] = useState<boolean>(true);\n\n  var [mapState, setMapState] = useState<boolean>(false); // 지도 업데이트 제어변수 \n\n  const openModal = (_citycode: number, _gpslati: number, _gpslong: number, _nodeid: string, _nodenm: string) => {\n    let busStop: BusStopInterface = {\n      citycode: _citycode,\n      gpslati: _gpslati,\n      gpslong: _gpslong,\n      nodeid: _nodeid,\n      nodenm: _nodenm\n    };\n    setPosition([_gpslati, _gpslong]);\n    setSelectBusStop(busStop);\n    setSelectID(_nodeid);\n    setZoomLevel(18);\n    setMapState(true); // Marker 클릭 시 Map 업데이트 true\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"contents\">\n        <Map station={station} setStation={setStation} openModal={openModal}\n          position={position}\n          selectID={selectID} setSelectID={setSelectID}\n          zoomLevel={zoomLevel} setZoomLevel={setZoomLevel}\n          mapState={mapState} setMapState={setMapState}\n          mapMode={mapMode} />\n        <Information station={station} openModal={openModal} mapMode={mapMode} />\n        <PopUp isOpen={isModalOpen} setIsModalOpen={setIsModalOpen}\n          selectBusStop={selectBusStop}\n          setMapMode={setMapMode}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}