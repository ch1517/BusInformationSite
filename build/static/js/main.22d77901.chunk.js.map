{"version":3,"sources":["apiRequest.tsx","modules/Map.tsx","static/images/bus.tsx","modules/information/index.tsx","modules/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiRequest","url","axios","get","process","then","response","catch","err","serviceKey","apiKey","station_key","checkLatLngOut","item","_southWest","_northEast","lat","lng","MapEvent","position","apiState","setPosition","setApiState","setStation","setZoomLevel","setZoomState","map","useMap","useEffect","navigator","geolocation","getCurrentPosition","_position","coords","latitude","longitude","setView","getZoom","costomEvent","zoomLevel","center","gpsLati","gpsLong","parameter","header","data","body","resultCode","items","newData","undefined","Array","isArray","forEach","nodeid","includes","push","console","log","error","getBusStationInfo","getCenter","getBounds","getSouthWest","getNorthEast","mapEvents","useMapEvents","zoomstart","zoomend","moveend","dragend","CustomTooltip","selectID","nodenm","Tooltip","direction","opacity","permanent","interactive","className","alt","src","Map","station","setSelectID","settingBusStop","vworld_url","vworld_key","useState","zoomState","mapIcon","leaflet","icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","MapContainer","zoom","scrollWheelZoom","TileLayer","maxZoom","maxNativeZoom","attribution","length","index","citycode","gpslati","gpslong","Marker","toString","eventHandlers","click","tooltipClick","BusSVG","props","version","xmlns","width","height","viewBox","preserveAspectRatio","transform","fill","stroke","d","Information","mapMode","selectBusStop","setMapMode","arravalInfo","setArravalInfo","refreshTime","setRefreshTime","loadState","setLoadState","routeInfo","setRouteInfo","arravalInRoute","setArravalInRoute","getBusColor","routetp","busColor","refreshTimeSave","date","Date","getHours","padStart","getMinutes","getBusArravalInfo","a","newArr","Promise","all","routeno","routeid","arrtime","arrprevstationcnt","newInfo","getRouteInfoIem","sort","x","y","getRouteAcctoBusLcList","getBusInfoByRouteId","nodeData","busStopList","convertVehicleTime","time","result","substr","onClick","Math","floor","startnodenm","endnodenm","BusArravalInfo","arravalList","startTime","startvehicletime","endTime","endvehicletime","nodeord","intervaltime","intervalsattime","intervalsuntime","style","borderColor","Object","keys","color","vehicleno","slice","nodeno","InfoComponent","App","setSelectBusStop","_citycode","_gpslati","_gpslong","_nodeid","_nodenm","busStop","Header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22d77901.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const apiRequest = (url: string) => {\n  return axios.get(`${process.env.REACT_APP_API_URL}${url}`)\n    .then(response => {\n      return response;\n    })\n    .catch(err => {\n      return err;\n    })\n}","import React from 'react';\nimport { MapContainer, TileLayer, Marker, useMap, useMapEvents, Tooltip } from 'react-leaflet';\nimport { useState, useEffect } from \"react\";\nimport 'leaflet/dist/leaflet.css';\nimport leaflet from 'leaflet';\nimport apiKey from '../private/apiKey.json';\nimport { apiRequest } from '../apiRequest';\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\nconst BASE_ZOOM_LEVEL = 17;\n\ninterface LatLngInterface {\n  lat: number;\n  lng: number;\n}\n\n// 화면의 latlng 내에 있는지 체크\nconst checkLatLngOut = (item: any, _southWest: LatLngInterface, _northEast: LatLngInterface) => {\n  if (item[\"gpslati\"] < _southWest.lat || item[\"gpslati\"] > _northEast.lat\n    || item[\"gpslong\"] < _southWest.lng || item[\"gpslong\"] > _northEast.lng)\n    return false;\n  return true;\n}\n/**\n * 정류장 정보가 두 개씩 나오는 경우 하나 필터링\n * @param nodeid \n * @returns \n */\nconst nodeidFiltering = (nodeid: string) => {\n  return !nodeid.includes('GHB')\n}\nconst getBusStationInfo = (setStation: (station: any[]) => void, apiState: boolean, center: LatLngInterface, _southWest: LatLngInterface, _northEast: LatLngInterface) => {\n  let gpsLati = center[\"lat\"];\n  let gpsLong = center[\"lng\"];\n  let parameter = `?serviceKey=${serviceKey}&gpsLati=${gpsLati}&gpsLong=${gpsLong}`;\n  let url = `/BusSttnInfoInqireService/getCrdntPrxmtSttnList${parameter}`;\n  if (apiState) {\n    apiRequest(url)\n      .then((response) => {\n        let header = response.data.response.header;\n        let data = response.data.response.body;\n        if (header.resultCode === \"00\" || header.resultCode === 0) {\n          // api 조회 정상적으로 완료 했을 때 \n          let items = data.items.item;\n          let newData: any[] = [];\n          if (items == null || items === undefined) {\n            newData = [];\n          } else if (Array.isArray(items)) {\n            items.forEach((item) => {\n              if (checkLatLngOut(item, _southWest, _northEast) && nodeidFiltering(item.nodeid)) {\n                newData.push(item);\n              }\n            });\n          } else {\n            if (!checkLatLngOut(items, _southWest, _northEast)) {\n              newData = [items];\n            } else {\n              newData = [];\n            }\n          }\n          setStation(newData);\n        } else {\n          console.log(data);\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n}\ninterface MapEventProps {\n  position: [number, number];\n  apiState: boolean;\n  setPosition: (position: [number, number]) => void;\n  setApiState: (apiState: boolean) => void;\n  setStation: (station: any[]) => void;\n  setZoomLevel: (zoomLevel: number) => void;\n  setZoomState: (zoomState: boolean) => void;\n}\n\nconst MapEvent: React.FC<MapEventProps> = ({ position, apiState, setPosition, setApiState, setStation, setZoomLevel, setZoomState }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((_position) => {\n      setPosition([_position.coords.latitude, _position.coords.longitude]);\n    });\n  }, []);\n\n  useEffect(() => {\n    map.setView(position, map.getZoom());\n  }, [position]);\n\n  // var state = true; // 초기화 시 한번만 실행하기 위한 state 변수\n  const costomEvent = (zoomLevel: number) => {\n    if (zoomLevel >= BASE_ZOOM_LEVEL && apiState) {\n      getBusStationInfo(setStation, apiState, map.getCenter(), map.getBounds().getSouthWest(), map.getBounds().getNorthEast());\n      // setApiState(true);\n    }\n  }\n  const mapEvents = useMapEvents({\n    zoomstart: () => {\n      setApiState(false);\n      setZoomState(false);\n    },\n    // 지도 zoom 종료\n    zoomend: () => {\n      setZoomLevel(mapEvents.getZoom()); // 현재 지도의 center lat, lng 가져오기\n      setApiState(true);\n      setZoomState(true);\n    },\n    // 지도 움직임 종료\n    moveend: () => {\n      costomEvent(mapEvents.getZoom());\n    },\n    // 스크롤로 이동할 때 false\n    dragend: () => {\n      setApiState(true);\n      setZoomState(true);\n    }\n  });\n  return <></>\n}\ninterface CustomTooltipProps {\n  selectID: string;\n  nodeid: string;\n  nodenm: string;\n}\nconst CustomTooltip: React.FC<CustomTooltipProps> = ({ selectID, nodeid, nodenm }) => {\n  return (\n    <Tooltip direction=\"top\" opacity={1} permanent interactive>\n      <div className={selectID === nodeid ? \"select\" : \"\"}>\n        <div><img alt=\"\" className=\"busIcon\" src={process.env.PUBLIC_URL + selectID === nodeid ? '/marker.png' : '/marker_white.png'} /></div>\n        <div>\n          <span>{nodenm}</span>\n          <span>{nodeid}</span>\n        </div>\n      </div>\n    </Tooltip>\n  )\n}\ninterface MapInterface {\n  position: [number, number];\n  zoomLevel: number;\n  station: any[];\n  selectID: string;\n  apiState: boolean;\n  setPosition: (position: [number, number]) => void;\n  setStation: (station: any[]) => void;\n  setZoomLevel: (zoomLevel: number) => void;\n  setSelectID: (selectID: string) => void;\n  settingBusStop: (citycode: number, gpslati: number, gpslong: number, nodeid: string, nodenm: string) => void;\n  setApiState: (apiState: boolean) => void;\n}\nconst Map: React.FC<MapInterface> = ({ position, zoomLevel, station, selectID, apiState, setPosition, setZoomLevel, setStation, setSelectID, settingBusStop, setApiState }) => {\n  const BASE_ZOOM_LEVEL = 15;\n  const vworld_url = `https://api.vworld.kr/req/wmts/1.0.0/${apiKey.vworld_key}/Base/{z}/{y}/{x}.png`;\n\n  const [zoomState, setZoomState] = useState(true);\n\n  let mapIcon = leaflet.icon({\n    iconUrl: process.env.PUBLIC_URL + '/marker.png',\n    iconRetinaUrl: process.env.PUBLIC_URL + '/marker.png',\n    iconAnchor: [15, 15],\n    popupAnchor: [0, 0],\n    iconSize: [30, 30],\n  });\n\n  let tooltipClick = (citycode: number, gpslati: number, gpslong: number, nodenm: string, nodeid: string) => {\n    setSelectID(nodeid);\n    settingBusStop(citycode, gpslati, gpslong, nodeid, nodenm);\n  }\n\n  return (\n    <div className=\"map-container\">\n      {zoomLevel < BASE_ZOOM_LEVEL ? <div className=\"alert-box\"><h5>조금 더 가까이 이동해주세요</h5></div> : <div></div>}\n      <MapContainer center={position} zoom={zoomLevel} scrollWheelZoom={true}>\n        <TileLayer maxZoom={22} maxNativeZoom={18}\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url={vworld_url}\n        />\n        <MapEvent apiState={apiState} setApiState={setApiState}\n          position={position} setPosition={setPosition}\n          setZoomLevel={setZoomLevel} setStation={setStation}\n          setZoomState={setZoomState} />\n        {/* zoom 중인 경우 marker 표시를 안하기 위해서 apiState 추가 */}\n        {zoomState\n          && zoomLevel >= BASE_ZOOM_LEVEL\n          && station.length > 0 &&\n          station.map(({ citycode, gpslati, gpslong, nodeid, nodenm }, index) => {\n            return (\n              <Marker position={[gpslati.toString(), gpslong.toString()]} icon={mapIcon} key={index}\n                eventHandlers={{ click: () => tooltipClick(citycode, gpslati, gpslong, nodenm, nodeid) }}\n              >\n                <CustomTooltip nodenm={nodenm} nodeid={nodeid} selectID={selectID} />\n              </Marker>\n            )\n          })}\n      </MapContainer>\n    </div >\n  )\n}\n\n\nexport default Map;\n","export const BusSVG = (props: any) => {\n    return (\n        <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"512.000000pt\" height=\"512.000000pt\" viewBox=\"0 0 512.000000 512.000000\"\n            preserveAspectRatio=\"xMidYMid meet\">\n\n            <g transform=\"translate(0.000000,512.000000) scale(0.100000,-0.100000)\"\n                fill={props.fill} stroke=\"none\">\n                <path d=\"M838 5104 c-169 -40 -318 -174 -381 -341 -21 -57 -22 -71 -27 -602\n   l-5 -544 -41 -12 c-117 -35 -253 -142 -312 -248 -60 -106 -67 -143 -67 -357 0\n   -189 1 -197 26 -251 57 -121 154 -180 307 -187 l92 -4 0 -837 c0 -921 -2 -894\n   62 -1013 60 -113 194 -223 316 -259 l42 -12 0 -57 c0 -170 69 -296 194 -352\n   50 -22 59 -23 341 -23 l290 0 56 26 c121 57 180 154 187 307 l4 92 638 0 638\n   0 4 -93 c7 -152 66 -249 187 -306 l56 -26 290 0 c282 0 291 1 341 23 125 56\n   194 182 194 352 l0 57 43 12 c121 36 255 146 315 259 64 119 62 92 62 1013 l0\n   837 93 4 c152 7 249 66 306 187 25 54 26 62 26 251 0 214 -7 251 -67 357 -59\n   106 -195 213 -312 248 l-41 12 -5 544 c-5 531 -6 545 -27 602 -64 169 -213\n   301 -385 342 -91 21 -3352 21 -3440 -1z m3032 -443 c61 -32 117 -86 148 -146\n   23 -43 27 -62 27 -140 0 -106 -20 -158 -88 -225 -51 -52 -96 -75 -172 -89 -82\n   -15 -2368 -15 -2450 0 -76 14 -121 37 -172 89 -68 67 -88 119 -88 225 0 75 4\n   98 24 135 42 81 117 145 201 171 14 4 588 7 1275 6 l1250 -2 45 -24z m206\n   -849 c58 -27 123 -89 153 -148 39 -76 42 -131 39 -717 l-3 -562 -33 -67 c-37\n   -76 -82 -120 -162 -157 l-55 -26 -1455 0 -1455 0 -67 33 c-76 37 -120 82 -157\n   162 l-26 55 -3 562 c-3 586 0 642 39 717 25 50 83 112 124 134 80 42 44 41\n   1560 39 l1450 -2 51 -23z m-2561 -2137 c135 -59 210 -200 183 -345 -13 -71\n   -37 -116 -88 -167 -67 -68 -119 -88 -225 -88 -75 0 -98 4 -135 24 -61 32 -116\n   86 -148 146 -23 43 -27 62 -27 140 0 106 20 158 88 225 50 51 86 70 157 86 69\n   15 130 8 195 -21z m2270 24 c76 -14 121 -37 172 -89 68 -67 88 -119 88 -225 0\n   -78 -4 -97 -27 -140 -32 -60 -87 -114 -148 -146 -65 -34 -204 -34 -272 -1 -55\n   27 -122 91 -148 142 -96 188 22 425 229 460 25 4 46 8 47 9 0 0 27 -4 59 -10z\"/>\n            </g>\n        </svg>\n    )\n}\n\n","\nimport React, { useEffect, useState } from 'react';\nimport apiKey from '../../private/apiKey.json';\nimport { apiRequest } from '../../apiRequest';\nimport RotateLoader from \"react-spinners/RotateLoader\";\nimport './style.css';\nimport { BusSVG } from '../../static/images/bus';\n\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\n\ninterface BusStopInterface {\n  citycode: number;\n  gpslati: number;\n  gpslong: number;\n  nodeid: string;\n  nodenm: string;\n  // nodeno: number;\n}\ninterface RouteInformation {\n  routeid?: string; //노선 ID\n  routeno?: string; // 노선번호\n  arrtime?: number; // 도착예정버스 도착예상시간[초]\n  arrprevstationcnt?: number; // 도착예정버스 남은 정류장 수\n  routeInfo?: any;\n}\n\ninterface RouteInformation {\n  routeno?: string; // 노선번호\n  arrtime?: number; // 도착예정버스 도착예상시간[초]\n  arrprevstationcnt?: number; // 도착예정버스 남은 정류장 수\n}\n\ninterface InformationProps {\n  mapMode: number;\n  station: any[];\n  selectBusStop: BusStopInterface | null;\n  settingBusStop: (citycode: number, gpslati: number, gpslong: number, nodeid: string, nodenm: string) => void;\n  setMapMode: (mapMode: number) => void;\n}\n\nconst Information: React.FC<InformationProps> = ({ mapMode, station, selectBusStop, settingBusStop, setMapMode }) => {\n  const [arravalInfo, setArravalInfo] = useState<any>([]);\n  const [refreshTime, setRefreshTime] = useState<string | null>(null);\n  // 로딩 state\n  const [loadState, setLoadState] = useState<boolean>(false);\n  // route information\n  const [routeInfo, setRouteInfo] = useState<RouteInformation | null>(null);\n  const [arravalInRoute, setArravalInRoute] = useState<any>(null);\n  /**\n   * 버스 노선 종류에 따른 색 반환\n   * @param routetp 노선 종류\n   * @returns \n   */\n  const getBusColor = (routetp: string) => {\n    let busColor: string = '#146ACC';\n    switch (routetp) {\n      case \"간선버스\":\n        busColor = \"#008039\";\n        break;\n      case \"좌석버스\":\n      case \"급행버스\":\n      case \"광역버스\":\n        busColor = \"#CC1100\";\n        break;\n      default:\n        break;\n    }\n    return busColor;\n  }\n  const BusArravalInfo = (data: any, index: number) => {\n    const time = Math.floor(data.arrtime! / 60);\n    let busColor: string = getBusColor(data.routeInfo.routetp);\n    return (\n      <div key={index} onClick={() => {\n        getBusInfoByRouteId(data);\n        // 도착 정보 다시 가져오는 API 호출\n        getRouteAcctoBusLcList(data.routeid);\n      }}>\n        <BusSVG fill={busColor} />\n        <div className=\"info-div\">\n          <div className=\"route-info\">\n            <div className=\"route-number\">\n              {data.routeno}\n            </div>\n            {typeof data.routeInfo !== \"number\" &&\n              <div className=\"route-start-end\">\n                {`${data.routeInfo.startnodenm}↔${data.routeInfo.endnodenm}`}\n              </div>\n            }\n          </div>\n          {/* <div>{data.routeInfo.routetp}</div> */}\n          <div className=\"arraval-info\">\n            <span>{time < 3 ? (\"잠시 후 도착\") : (`${time}분`)}</span>\n            <span>{data.arrprevstationcnt}정류장</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const refreshTimeSave = () => {\n    const date = new Date();\n    setRefreshTime(`${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`);\n  }\n  const getBusArravalInfo = async () => {\n    setLoadState(true);\n    const parameter = `?serviceKey=${serviceKey}&cityCode=${selectBusStop!.citycode}&nodeId=${selectBusStop!.nodeid}`;\n    const url = `/ArvlInfoInqireService/getSttnAcctoArvlPrearngeInfoList${parameter}`;\n    let response = await apiRequest(url);\n    let header = response.data.response.header;\n    let data = response.data.response.body;\n    // api 조회 정상적으로 완료 했을 때 \n    if (header.resultCode === \"00\" || header.resultCode === 0) {\n      var items = data.items;\n      var newArr: any = [];\n      if (items['item'] != null) {\n        items = items.item;\n        // 배열이며, 길이가 0이 아닐 때\n        if (items.length !== 0 && Array.isArray(items)) {\n          newArr = await Promise.all(items.map(async ({ routeno, routeid, arrtime, arrprevstationcnt }) => {\n            var newInfo: RouteInformation = {};\n            newInfo['routeid'] = routeid;\n            newInfo['routeno'] = routeno;\n            newInfo['arrtime'] = arrtime;\n            newInfo['arrprevstationcnt'] = arrprevstationcnt;\n            let routeInfo = await getRouteInfoIem(routeid);\n            newInfo['routeInfo'] = routeInfo;\n            return newInfo;\n          }))\n        } else if (typeof (items) === 'object') {\n          let newInfo: RouteInformation = {};\n          newInfo['routeid'] = items['routeid'];\n          newInfo['routeno'] = items['routeno'];\n          newInfo['arrtime'] = items['arrtime'];\n          newInfo['arrprevstationcnt'] = items['arrprevstationcnt'];\n          let routeInfo = await getRouteInfoIem(items['routeid']);\n          newInfo['routeInfo'] = routeInfo;\n          newArr.push(newInfo);\n        } else {\n          console.log(items);\n        }\n      }\n      // 도착 시간 순으로 정렬\n      newArr.sort((x: RouteInformation, y: RouteInformation) => x.arrtime! - y.arrtime!)\n      setArravalInfo(newArr);\n      refreshTimeSave();\n      setLoadState(false);\n    } else {\n      console.log(data.header.resultCode)\n    }\n  }\n  /**\n   * 노선별로 버스의 GPS 위치정보의 목록을 조회\n   * @param routeid route id\n   */\n  const getRouteAcctoBusLcList = async (routeid: string) => {\n    const parameter = `?serviceKey=${serviceKey}&cityCode=${selectBusStop!.citycode}&routeId=${routeid}`;\n    const url = `/BusLcInfoInqireService/getRouteAcctoBusLcList${parameter}`;\n    const response = await apiRequest(url);\n    let header = response.data.response.header;\n    let data = response.data.response.body;\n    // api 조회 정상적으로 완료 했을 때 \n    if (header.resultCode === \"00\" || header.resultCode === 0) {\n      let item = data.items.item;\n      refreshTimeSave();\n      setArravalInRoute(item);\n    }\n  }\n  /**\n   * 노선의 기본정보(종점, 출발점, 버스종류)를 반환하는 API 호출\n   * @param routeno \n   * @param routeid \n   * @returns \n   */\n  const getRouteInfoIem = async (routeid: string) => {\n    const parameter = `?serviceKey=${serviceKey}&cityCode=${selectBusStop!.citycode}&routeId=${routeid}`;\n    const url = `/BusRouteInfoInqireService/getRouteInfoIem${parameter}`;\n    const response = await apiRequest(url);\n    let header = response.data.response.header;\n    let data = response.data.response.body;\n    // api 조회 정상적으로 완료 했을 때 \n    if (header.resultCode === \"00\" || header.resultCode === 0) {\n      let item = data.items.item;\n      return item;\n    }\n    return header.resultCode;\n  }\n  const getBusInfoByRouteId = async (nodeData: any) => {\n    const parameter = `?serviceKey=${serviceKey}&cityCode=${selectBusStop?.citycode}&routeId=${nodeData.routeid}&numOfRows=500`;\n    const url = `/BusRouteInfoInqireService/getRouteAcctoThrghSttnList${parameter}`;\n    const response = await apiRequest(url);\n    let header = response.data.response.header;\n    let data = response.data.response.body;\n    // api 조회 정상적으로 완료 했을 때 \n    if (header.resultCode === \"00\" || header.resultCode === 0) {\n      let item = data.items.item;\n      nodeData.routeInfo.busStopList = item;\n      setRouteInfo(nodeData);\n      setMapMode(2);\n    }\n  }\n\n  useEffect(() => {\n    console.log('arravalInRoute', arravalInRoute)\n  }, [arravalInRoute]);\n\n  useEffect(() => {\n    // X 눌러서 다시 bus stop list로 돌아올 때 arravalInfo 초기화\n    if (mapMode === 0 && arravalInfo.length > 0) {\n      setArravalInfo([]);\n    }\n  }, [mapMode]);\n  useEffect(() => {\n    if (selectBusStop !== null && mapMode === 1) {\n      getBusArravalInfo();\n    };\n  }, [selectBusStop, mapMode]);\n\n  const convertVehicleTime = (time: string | number) => {\n    let result = typeof time === \"number\" ? time.toString() : time;\n    result = `${result.substr(0, 2)}:${result.substr(2)}`\n    return result;\n  }\n  const InfoComponent = () => {\n    switch (mapMode) {\n      // BusStopList\n      case 0:\n        return (\n          <div className=\"information-table\">\n            <div className=\"bus-stop-list\">\n              {/* Map mode false인 경우 버스 노선 그리기  */}\n              {station.length > 0 &&\n                station.map(({ citycode, gpslati, gpslong, nodenm, nodeid }: BusStopInterface, index) => {\n                  return (\n                    <div key={index} onClick={() => settingBusStop(citycode, gpslati, gpslong, nodeid, nodenm)}>\n                      <div className='info'>\n                        <img src={process.env.PUBLIC_URL + '/marker.png'} alt=\"\" />\n                        <h5>{nodenm}({nodeid})</h5>\n                      </div>\n                    </div>\n                  )\n                })\n              }\n            </div>\n          </div>\n        )\n      // BusStopInformation\n      case 1:\n        return (\n          <>\n            <div className=\"bus-stop-contaienr\">\n              <div className=\"bus-stop-name\">{selectBusStop!.nodenm}</div>\n              <div className=\"bus-stop-information\">\n                <div className=\"refresh-time\">\n                  {refreshTime} 기준\n                  <button\n                    onClick={() => getBusArravalInfo()\n                    }><i className=\"fas fa-sync-alt\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            {loadState ?\n              <div className=\"loading\"><RotateLoader /> </div>\n              :\n              <div className=\"bus-arraval-list\">\n                {arravalInfo.length > 0 ?\n                  arravalInfo.map((data: any, index: number) => {\n                    return BusArravalInfo(data, index);\n                  })\n                  :\n                  <span>도착 예정 정보 없음</span>\n                }\n              </div >\n            }\n          </>\n        )\n      case 2:\n        let startTime = convertVehicleTime(routeInfo?.routeInfo.startvehicletime);\n        let endTime = convertVehicleTime(routeInfo?.routeInfo.endvehicletime);\n        let arravalList: any;\n        if (arravalInRoute === null) arravalList = []\n        else {\n          arravalList = {};\n          arravalInRoute.forEach((data: any) => arravalList[data.nodeord] = data);\n        }\n        let busColor: string = getBusColor(routeInfo?.routeInfo.routetp);\n        return (\n          <div className=\"route-container\">\n            <div className=\"bus-stop-contaienr\">\n              <div className=\"bus-stop-name\">\n                <BusSVG fill={busColor} />\n                {routeInfo!.routeno}\n              </div>\n              <div className=\"route-info-container\">\n                <div className=\"route-info-item\">\n                  <div className=\"title\">노선유형</div>\n                  <div className=\"information\">{routeInfo?.routeInfo.routetp}</div>\n                </div>\n                <div className=\"route-info-item\">\n                  <div className=\"title\">운행시간</div>\n                  <div className=\"information\">첫차 {startTime}, 막차 {endTime}</div>\n                </div>\n                <div className=\"route-info-item\">\n                  <div className=\"title\">배차간격</div>\n                  <div className=\"information\">평일 {routeInfo?.routeInfo.intervaltime}분, 토요일 {routeInfo?.routeInfo.intervalsattime}분, 일요일 {routeInfo?.routeInfo.intervalsuntime}분</div>\n                </div>\n              </div>\n              <div className=\"bus-stop-information\">\n                <div className=\"refresh-time\">\n                  {refreshTime} 기준\n                  <button\n                    onClick={() => getRouteAcctoBusLcList(routeInfo?.routeid!)}><i className=\"fas fa-sync-alt\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"route-list\">\n              {routeInfo !== null &&\n                routeInfo.routeInfo.busStopList.map((data: any, index: number) => {\n                  return (\n                    <div className=\"route-item\" key={index}>\n                      <div className=\"route-line\" style={{ borderColor: busColor }}>\n                        {Object.keys(arravalList).includes(data.nodeord.toString()) ?\n                          <>\n                            <div className='bus-logo' style={{ borderColor: busColor }}><BusSVG fill={busColor} /></div>\n                            <div className='bus-number' style={{ color: busColor, borderColor: busColor }}>{arravalList[data.nodeord.toString()].vehicleno.slice(-7)}</div>\n                          </>\n                          : <></>\n                        }\n                      </div>\n                      <div className=\"bus-stop-text\">\n                        <div className=\"node-name\">{data.nodenm}\n                          {routeInfo.routeInfo.startnodenm === data.nodenm && <div className=\"start-end-label\">기점</div>}\n                          {routeInfo.routeInfo.endnodenm === data.nodenm && <div className=\"start-end-label\">종점</div>}\n                        </div>\n                        <div className=\"node-number\">{data.nodeno}</div>\n                      </div>\n                    </div>\n                  )\n                }\n                )}\n            </div>\n          </div >\n        )\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <div className=\"information-container\">\n      {InfoComponent()}\n    </div>\n  )\n}\n\nexport default Information;","import '../App.css';\nconst App = () => {\n  return (\n    <header className=\"App-header\">\n      <div className=\"logo\">Bus Information</div>\n    </header>\n  );\n}\n\nexport default App;","import { useState } from 'react';\nimport './App.css';\nimport Map from './modules/Map';\nimport Information from './modules/information';\nimport Header from './modules/Header';\n\ninterface BusStopInterface {\n  citycode: number;\n  gpslati: number;\n  gpslong: number;\n  nodeid: string;\n  nodenm: string;\n  // nodeno: number;\n}\nconst App = () => {\n  const [zoomLevel, setZoomLevel] = useState<number>(16); // initial zoom level provided for MapContainer\n  const [position, setPosition] = useState<[number, number]>([36.37412735693837, 127.36563659840922]);\n  const [station, setStation] = useState<any[]>([]);\n  const [selectBusStop, setSelectBusStop] = useState<BusStopInterface | null>(null);\n  const [selectID, setSelectID] = useState<string>(\"-1\");\n  // True 인 경우 주변 정류장 정보 API 호출 \n  const [mapMode, setMapMode] = useState<number>(0);\n  const [apiState, setApiState] = useState(true);\n\n  const settingBusStop = (_citycode: number, _gpslati: number, _gpslong: number, _nodeid: string, _nodenm: string) => {\n    let busStop: BusStopInterface = {\n      citycode: _citycode,\n      gpslati: _gpslati,\n      gpslong: _gpslong,\n      nodeid: _nodeid,\n      nodenm: _nodenm\n    };\n    setPosition([_gpslati, _gpslong]);\n    setSelectBusStop(busStop);\n    setSelectID(_nodeid);\n    setZoomLevel(18);\n    setApiState(false);\n    setMapMode(1);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"contents\">\n        <Map station={station} setStation={setStation}\n          settingBusStop={settingBusStop}\n          position={position} setPosition={setPosition}\n          selectID={selectID} setSelectID={setSelectID}\n          zoomLevel={zoomLevel} setZoomLevel={setZoomLevel}\n          apiState={apiState} setApiState={setApiState} />\n        <Information station={station} settingBusStop={settingBusStop} setMapMode={setMapMode}\n          mapMode={mapMode} selectBusStop={selectBusStop} />\n        <button className=\"mode-change-button\"\n          onClick={() => {\n            if (mapMode !== 0)\n              setMapMode(mapMode - 1);\n          }}>\n          <i className=\"fas fa-times\"></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}