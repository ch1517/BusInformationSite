{"version":3,"sources":["parser.js","modules/Map.js","modules/Information.js","modules/Header.js","modules/PopUp.js","App.js","reportWebVitals.js","index.js"],"names":["objectToText","object","Object","keys","map","key","_text","serviceKey","apiKey","station_key","checkLatLngOut","item","_southWest","_northEast","lat","lng","MapEvent","props","useMap","apiState","costomEvent","mapEvents","getZoom","mapMode","center","gpsLati","gpsLong","url","axios","get","then","response","data","request","JSON","parse","header","resultCode","items","body","newData","Array","isArray","forEach","index","push","setStation","console","log","catch","error","getBusStationInfo","getCenter","getBounds","useMapEvents","zoomend","setZoomLevel","moveend","dragend","CustomTooltip","useEffect","Tooltip","direction","opacity","permanent","interactive","className","selectID","nodeid","src","process","nodenm","Map","useState","setApiState","mapIcon","leaflet","icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","tooltipClick","gpslati","gpslong","citycode","setSelectID","openModal","vworld_url","vworld_key","zoomLevel","BASE_ZOOM_LEVEL","MapContainer","position","zoom","scrollWheelZoom","TileLayer","maxZoom","maxNativeZoom","attribution","MapConsumer","mapState","setView","setMapState","station","length","Marker","eventHandlers","click","bind","Information","onClick","App","BusArravalInfo","array","routeno","arrprevstationcnt","arrtime","time","parseInt","PopUp","isOpen","close","arravalInfo","setMapMode","onclickBusName","setPosition","isModalOpen","setIsModalOpen","setNodenm","setArravalInfo","_gpslati","_gpslong","_nodenm","_nodeid","_citycode","getBusArravalInfo","newArr","routeid","newInfo","Header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c08b547.chunk.js","sourcesContent":["function objectToText(object) {\n    Object.keys(object).map(function (key) {\n        object[key] = object[key]._text;\n    });\n    return object;\n}\nexport default objectToText;","import { React } from 'react';\nimport { MapContainer, TileLayer, Marker, MapConsumer, useMap, useMapEvents, Tooltip } from 'react-leaflet';\nimport { useState, useEffect } from \"react\";\nimport 'leaflet/dist/leaflet.css'\nimport axios from 'axios';\nimport leaflet from 'leaflet';\nimport apiKey from '../private/apiKey.json';\nimport objectToText from '../parser';\n\nconst serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\nconst BASE_ZOOM_LEVEL = 13;\n\n// 화면의 latlng 내에 있는지 체크\nfunction checkLatLngOut(item, _southWest, _northEast) {\n    if (item[\"gpslati\"] < _southWest.lat || item[\"gpslati\"] > _northEast.lat\n        || item[\"gpslong\"] < _southWest.lng || item[\"gpslong\"] > _northEast.lng)\n        return false;\n    return true;\n}\n\nfunction getBusStationInfo(props, apiState, center, _southWest, _northEast) {\n    var gpsLati = center[\"lat\"];\n    var gpsLong = center[\"lng\"];\n    var parameter = \"?serviceKey=\" + serviceKey + \"&gpsLati=\" + gpsLati + \"&gpsLong=\" + gpsLong;\n    var url = '/api/BusSttnInfoInqireService/getCrdntPrxmtSttnList' + parameter;\n    if (apiState) {\n        axios.get(url)\n            .then(function (response) {\n                var data = response.request.response;\n                data = JSON.parse(data).response;\n                if (data.header.resultCode._text == \"00\") {\n                    // api 조회 정상적으로 완료 했을 때 \n                    var items = data.body.items.item;\n                    var newData = [];\n                    if (items == null) {\n                        newData = [];\n                    } else if (Array.isArray(items)) {\n                        items.forEach(function (item, index, object) {\n                            item = objectToText(item);\n                            if (checkLatLngOut(item, _southWest, _northEast)) {\n                                newData.push(item);\n                            }\n                        });\n                    } else {\n                        items = objectToText(items);\n                        if (!checkLatLngOut(items, _southWest, _northEast)) {\n                            newData = [items];\n                        } else {\n                            newData = [];\n                        }\n                    }\n\n                    props.setStation(newData);\n                } else {\n                    console.log(data.header.resultCode);\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n}\nfunction MapEvent(props) {\n    const map = useMap();\n    // var state = true; // 초기화 시 한번만 실행하기 위한 state 변수\n    var apiState = props.apiState;\n    const costomEvent = (mapEvents) => {\n        if (mapEvents.getZoom() > BASE_ZOOM_LEVEL && props.mapMode) {\n            getBusStationInfo(props, apiState, map.getCenter(), map.getBounds()._southWest, map.getBounds()._northEast);\n            apiState = true;\n        }\n    }\n    const mapEvents = useMapEvents({\n        // 지도 zoom 종료\n        zoomend: () => {\n            props.setZoomLevel(mapEvents.getZoom()); // 현재 지도의 center lat, lng 가져오기\n            costomEvent(mapEvents);\n        },\n        // 지도 움직임 종료\n        moveend: () => {\n            costomEvent(mapEvents);\n        },\n        // 스크롤로 이동할 때 false\n        dragend: () => {\n            apiState = true;\n        }\n    });\n    return (null)\n}\nfunction CustomTooltip(props) {\n    useEffect(() => {\n        return () => {\n            // props.setSelectID(-1);\n        };\n    }, []);\n    return (\n        <Tooltip direction=\"top\" opacity={1} permanent interactive>\n            <div className={props.selectID == props.nodeid ? \"select\" : \"\"}>\n                <div><img className=\"busIcon\" src={process.env.PUBLIC_URL + props.selectID == props.nodeid ? '/marker.png' : '/marker_white.png'} /></div>\n                <div>\n                    <span>{props.nodenm}</span>\n                    <span>{props.nodeid}</span>\n                </div>\n            </div>\n        </Tooltip>\n    )\n\n\n}\nfunction Map(props) {\n    var [apiState, setApiState] = useState(true);\n    const BASE_ZOOM_LEVEL = 13;\n\n    let mapIcon = leaflet.icon({\n        iconUrl: process.env.PUBLIC_URL + '/marker.png',\n        iconRetinaUrl: process.env.PUBLIC_URL + '/marker.png',\n        iconAnchor: [15, 15],\n        popupAnchor: [0, 0],\n        iconSize: [30, 30],\n    });\n\n    let tooltipClick = (gpslati, gpslong, nodenm, nodeid, citycode) => {\n        props.setSelectID(nodeid);\n        props.openModal(gpslati, gpslong, nodenm, nodeid, citycode);\n    }\n\n    let vworld_url = \"https://api.vworld.kr/req/wmts/1.0.0/\" + apiKey.vworld_key + \"/Base/{z}/{y}/{x}.png\"\n    return (\n        <div className=\"map-container\">\n\n            {props.zoomLevel < BASE_ZOOM_LEVEL + 1 ? <div className=\"alert-box\"><h5>조금 더 가까이 이동해주세요</h5></div> : <div></div>}\n\n            <MapContainer center={props.position} zoom={props.zoomLevel} scrollWheelZoom={true}>\n                <TileLayer maxZoom={22} maxNativeZoom={18} zoom={props.zoomLevel}\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url={vworld_url}\n                />\n                <MapEvent apiState={apiState} mapMode={props.mapMode} zoomLevel={props.zoomLevel} setZoomLevel={props.setZoomLevel} setStation={props.setStation} />\n                <MapConsumer>\n                    {(map) => {\n                        if (props.mapState) { // Marker 위치, zoomLevel 19로 지도 업데이트\n                            map.setView(props.position, props.zoomLevel);\n                            setApiState(false); // Marker 클릭 center 설정 시에는 api 호출 안함\n                            props.setMapState(false);\n                        }\n                        return null\n                    }}\n                </MapConsumer>\n                {props.mapMode && props.station.length > 0 &&\n                    props.station.map(({ gpslati, gpslong, nodenm, nodeid, citycode }, index) => {\n                        return (\n                            <Marker position={[gpslati + \"\", gpslong + \"\"]} icon={mapIcon} permanent\n                                eventHandlers={{ click: tooltipClick.bind(this, gpslati, gpslong, nodenm, nodeid, citycode) }}>\n                                <CustomTooltip gpslati={gpslati} gpslong={gpslong} nodenm={nodenm} nodeid={nodeid}\n                                    citycode={citycode} setSelectID={props.setSelectID} selectID={props.selectID} />\n                            </Marker>\n                        )\n                    })}\n            </MapContainer>\n        </div >\n    )\n}\n\n\nexport default Map;\n","\nimport React from 'react';\n\nfunction Information(props) {\n    return (\n        <div className=\"infomation-container\">\n            {props.mapMode ? (\n                <div className=\"infomation-table\">\n                    {/* Map mode false인 경우 버스 노선 그리기  */}\n                    {props.station.length > 0 &&\n                        props.station.map(({ gpslati, gpslong, nodenm, nodeid, citycode }) => {\n                            return (\n                                <div onClick={() => props.openModal(gpslati, gpslong, nodenm, nodeid, citycode)}>\n                                    <div className='info'>\n                                        <img src={process.env.PUBLIC_URL + '/marker.png'} />\n                                        <h5>{nodenm}({nodeid})</h5>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n                : (\n                    <div>구현해야할 내용</div>\n                )\n            }\n\n        </div >\n    )\n}\n\nexport default Information;","import '../App.css';\nfunction App() {\n    return (\n        <header className=\"App-header\">\n            <div className=\"logo\">Bus Information</div>\n        </header>\n    );\n}\n\nexport default App;","\nimport React, { Component, useState } from 'react';\n\nfunction onclickBusName(props) {\n    props.setMapMode(false);\n}\nfunction BusArravalInfo(props) {\n    return (\n        props.array.map(({ routeno, arrprevstationcnt, arrtime }) => {\n            const time = parseInt(parseInt(arrtime) / 60);\n            return (\n                <div>\n                    <span>{time < 3 ? (\"잠시 후 도착\") : (`${time}분 후`)}</span>\n                    <span>{arrprevstationcnt} 정거장 전</span>\n                </div>\n\n            )\n        }\n        )\n    )\n}\nfunction PopUp(props) {\n    const { isOpen, close } = props;\n    return (\n        <>{\n            isOpen ? (\n                <div className=\"modal-container \">\n                    <div className=\"modal\">\n                        <button onClick={close}>X</button>\n                        <div className=\"info-content\">\n                            <h3 className=\"station-name\"><font>{props.nodenm}</font></h3>\n                            <div className=\"arrival-info-container\">\n                                {Object.keys(props.arravalInfo).length > 0 &&\n                                    Object.keys(props.arravalInfo).map((key, index) => {\n                                        return (\n                                            <div className=\"arrival-bus-info\" onClick={() => {\n                                                onclickBusName(props, close)\n                                                close() // popup 닫기\n                                            }\n                                            }>\n                                                <span className=\"route-number\">{props.arravalInfo[key][0]['routeno']}번</span>\n                                                <span className=\"arrival-bus-container\">\n                                                    <BusArravalInfo array={props.arravalInfo[key]} ></BusArravalInfo>\n                                                </span>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ) : null\n        }\n        </>\n    )\n}\n\nexport default PopUp;","import React, { Component, useState } from 'react';\nimport './App.css';\nimport Map from './modules/Map';\nimport Information from './modules/Information';\nimport Header from './modules/Header';\nimport PopUp from './modules/PopUp';\nimport apiKey from './private/apiKey.json';\nimport axios from 'axios';\nimport objectToText from './parser';\n\nfunction App(props) {\n  const [zoomLevel, setZoomLevel] = useState(16); // initial zoom level provided for MapContainer\n  const [position, setPosition] = useState([36.37412735693837, 127.36563659840922]);\n  const [station, setStation] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [nodenm, setNodenm] = useState(null);\n  const [arravalInfo, setArravalInfo] = useState({});\n  const [selectID, setSelectID] = useState(-1);\n  // True 인 경우 주변 정류장 정보 API 호출 \n  const [mapMode, setMapMode] = useState(true);\n\n  var [mapState, setMapState] = useState(false); // 지도 업데이트 제어변수 \n\n  const openModal = (_gpslati, _gpslong, _nodenm, _nodeid, _citycode) => {\n    setPosition([_gpslati, _gpslong]);\n    getBusArravalInfo(_citycode, _nodeid);\n    setNodenm(_nodenm);\n    setSelectID(_nodeid);\n    setZoomLevel(18);\n    setMapState(true); // Marker 클릭 시 Map 업데이트 true\n  };\n\n  const getBusArravalInfo = (citycode, nodeid) => {\n    const serviceKey = apiKey.station_key; // 버스정류장 정보조회 Key\n    var parameter = \"?serviceKey=\" + serviceKey + \"&cityCode=\" + citycode + \"&nodeId=\" + nodeid;\n    var url = '/api/ArvlInfoInqireService/getSttnAcctoArvlPrearngeInfoList' + parameter;\n    axios.get(url)\n      .then(function (response) {\n        var data = response.request.response;\n        data = JSON.parse(data).response;\n        if (data.header.resultCode._text == \"00\") {\n          // api 조회 정상적으로 완료 했을 때 \n          var items = data.body.items;\n          var newArr = {};\n          if (items['item'] != null) {\n            items = items.item;\n            // 배열이며, 길이가 0이 아닐 때\n            if (items.length != 0 && Array.isArray(items)) {\n              items.forEach(item => {\n                item = objectToText(item);\n              });\n\n              items.map(({ routeno, routeid, arrtime, arrprevstationcnt }) => {\n                var newInfo = {};\n                newInfo['routeno'] = routeno;\n                newInfo['arrtime'] = arrtime;\n                newInfo['arrprevstationcnt'] = arrprevstationcnt;\n\n                if (newArr[routeid] == null) {\n                  newArr[routeid] = []\n                }\n                newArr[routeid].push(newInfo);\n              })\n\n            } else if (typeof (items) === 'object') {\n              items = objectToText(items);\n\n              var newInfo = {};\n              var routeid = items['routeid'];\n              newInfo['routeno'] = items['routeno'];\n              newInfo['arrtime'] = items['arrtime'];\n              newInfo['arrprevstationcnt'] = items['arrprevstationcnt'];\n              if (newArr[routeid] == null) {\n                newArr[routeid] = []\n              }\n              newArr[routeid].push(newInfo);\n            } else {\n              console.log(items);\n            }\n          }\n          setArravalInfo(newArr);\n          setIsModalOpen(true);\n        } else {\n          console.log(data.header.resultCode)\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"contents\">\n        <Map station={station} setStation={setStation} openModal={openModal}\n          position={position}\n          selectID={selectID} setSelectID={setSelectID}\n          zoomLevel={zoomLevel} setZoomLevel={setZoomLevel}\n          mapState={mapState} setMapState={setMapState}\n          mapMode={mapMode} />\n        <Information station={station} openModal={openModal} mapMode={mapMode} />\n        <PopUp isOpen={isModalOpen} close={() => setIsModalOpen(false)}\n          nodenm={nodenm} arravalInfo={arravalInfo} mapMode={mapMode} setMapMode={setMapMode}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}